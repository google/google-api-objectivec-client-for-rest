// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Apigee API (apigee/v1)
// Description:
//   The Apigee API lets you programmatically manage Apigee hybrid with a set of
//   RESTful operations, including:<ul> <li>Create, edit, and delete API
//   proxies</li> <li>Manage users</li> <li>Deploy and undeploy proxy
//   revisions</li> <li>Configure environments</li></ul><p>For information on
//   using the APIs described in this section, see <a
//   href="docs.apigee.com/hybrid/latest/api-get-started">Get started using the
//   APIs</a>.</p><p><strong>Note:</strong> This product is available as a free
//   trial for a time period of 60 days.
// Documentation:
//   https://cloud.google.com/apigee-api-management/

#if SWIFT_PACKAGE || GTLR_USE_MODULAR_IMPORT
  @import GoogleAPIClientForRESTCore;
#elif GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRApigee_GoogleApiHttpBody;
@class GTLRApigee_GoogleCloudApigeeV1ApiProduct;
@class GTLRApigee_GoogleCloudApigeeV1Attribute;
@class GTLRApigee_GoogleCloudApigeeV1Attributes;
@class GTLRApigee_GoogleCloudApigeeV1CustomReport;
@class GTLRApigee_GoogleCloudApigeeV1Datastore;
@class GTLRApigee_GoogleCloudApigeeV1DebugMask;
@class GTLRApigee_GoogleCloudApigeeV1DebugSession;
@class GTLRApigee_GoogleCloudApigeeV1Developer;
@class GTLRApigee_GoogleCloudApigeeV1DeveloperApp;
@class GTLRApigee_GoogleCloudApigeeV1DeveloperAppKey;
@class GTLRApigee_GoogleCloudApigeeV1Environment;
@class GTLRApigee_GoogleCloudApigeeV1EnvironmentGroup;
@class GTLRApigee_GoogleCloudApigeeV1EnvironmentGroupAttachment;
@class GTLRApigee_GoogleCloudApigeeV1ExportRequest;
@class GTLRApigee_GoogleCloudApigeeV1FlowHook;
@class GTLRApigee_GoogleCloudApigeeV1GetSyncAuthorizationRequest;
@class GTLRApigee_GoogleCloudApigeeV1Instance;
@class GTLRApigee_GoogleCloudApigeeV1InstanceAttachment;
@class GTLRApigee_GoogleCloudApigeeV1Keystore;
@class GTLRApigee_GoogleCloudApigeeV1KeyValueMap;
@class GTLRApigee_GoogleCloudApigeeV1Organization;
@class GTLRApigee_GoogleCloudApigeeV1Query;
@class GTLRApigee_GoogleCloudApigeeV1Reference;
@class GTLRApigee_GoogleCloudApigeeV1ReportInstanceStatusRequest;
@class GTLRApigee_GoogleCloudApigeeV1Subscription;
@class GTLRApigee_GoogleCloudApigeeV1SyncAuthorization;
@class GTLRApigee_GoogleCloudApigeeV1TargetServer;
@class GTLRApigee_GoogleIamV1SetIamPolicyRequest;
@class GTLRApigee_GoogleIamV1TestIamPermissionsRequest;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Apigee query classes.
 */
@interface GTLRApigeeQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Lists hybrid services and its trusted issuers service account ids.
 *  This api is authenticated and unauthorized(allow all the users) and used by
 *  runtime authn-authz service to query control plane's issuer service account
 *  ids.
 *
 *  Method: apigee.hybrid.issuers.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_HybridIssuersList : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForHybridIssuersListWithname:]

/** Required. Must be of the form `hybrid/issuers`. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1ListHybridIssuersResponse.
 *
 *  Lists hybrid services and its trusted issuers service account ids.
 *  This api is authenticated and unauthorized(allow all the users) and used by
 *  runtime authn-authz service to query control plane's issuer service account
 *  ids.
 *
 *  @param name Required. Must be of the form `hybrid/issuers`.
 *
 *  @return GTLRApigeeQuery_HybridIssuersList
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Create a Datastore for an org
 *
 *  Method: apigee.organizations.analytics.datastores.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsAnalyticsDatastoresCreate : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsAnalyticsDatastoresCreateWithObject:parent:]

/**
 *  Required. The parent organization name.
 *  Must be of the form `organizations/{org}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1Datastore.
 *
 *  Create a Datastore for an org
 *
 *  @param object The @c GTLRApigee_GoogleCloudApigeeV1Datastore to include in
 *    the query.
 *  @param parent Required. The parent organization name.
 *    Must be of the form `organizations/{org}`.
 *
 *  @return GTLRApigeeQuery_OrganizationsAnalyticsDatastoresCreate
 */
+ (instancetype)queryWithObject:(GTLRApigee_GoogleCloudApigeeV1Datastore *)object
                         parent:(NSString *)parent;

@end

/**
 *  Delete a Datastore from an org.
 *
 *  Method: apigee.organizations.analytics.datastores.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsAnalyticsDatastoresDelete : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsAnalyticsDatastoresDeleteWithname:]

/**
 *  Required. Resource name of the Datastore to be deleted. Must be of the
 *  form `organizations/{org}/analytics/datastores/{datastoreId}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleProtobufEmpty.
 *
 *  Delete a Datastore from an org.
 *
 *  @param name Required. Resource name of the Datastore to be deleted. Must be
 *    of the
 *    form `organizations/{org}/analytics/datastores/{datastoreId}`
 *
 *  @return GTLRApigeeQuery_OrganizationsAnalyticsDatastoresDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Get a Datastore
 *
 *  Method: apigee.organizations.analytics.datastores.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsAnalyticsDatastoresGet : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsAnalyticsDatastoresGetWithname:]

/**
 *  Required. Resource name of the Datastore to be get. Must be of the
 *  form `organizations/{org}/analytics/datastores/{datastoreId}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1Datastore.
 *
 *  Get a Datastore
 *
 *  @param name Required. Resource name of the Datastore to be get. Must be of
 *    the
 *    form `organizations/{org}/analytics/datastores/{datastoreId}`
 *
 *  @return GTLRApigeeQuery_OrganizationsAnalyticsDatastoresGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  List Datastores
 *
 *  Method: apigee.organizations.analytics.datastores.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsAnalyticsDatastoresList : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsAnalyticsDatastoresListWithparent:]

/**
 *  Required. The parent organization name.
 *  Must be of the form `organizations/{org}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Optional. TargetType is used to fetch all Datastores that match the type
 */
@property(nonatomic, copy, nullable) NSString *targetType;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1ListDatastoresResponse.
 *
 *  List Datastores
 *
 *  @param parent Required. The parent organization name.
 *    Must be of the form `organizations/{org}`.
 *
 *  @return GTLRApigeeQuery_OrganizationsAnalyticsDatastoresList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Test if Datastore configuration is correct. This includes checking
 *  if credentials provided by customer have required permissions in target
 *  destination storage
 *
 *  Method: apigee.organizations.analytics.datastores.test
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsAnalyticsDatastoresTest : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsAnalyticsDatastoresTestWithObject:parent:]

/**
 *  Required. The parent organization name
 *  Must be of the form `organizations/{org}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1TestDatastoreResponse.
 *
 *  Test if Datastore configuration is correct. This includes checking
 *  if credentials provided by customer have required permissions in target
 *  destination storage
 *
 *  @param object The @c GTLRApigee_GoogleCloudApigeeV1Datastore to include in
 *    the query.
 *  @param parent Required. The parent organization name
 *    Must be of the form `organizations/{org}`
 *
 *  @return GTLRApigeeQuery_OrganizationsAnalyticsDatastoresTest
 */
+ (instancetype)queryWithObject:(GTLRApigee_GoogleCloudApigeeV1Datastore *)object
                         parent:(NSString *)parent;

@end

/**
 *  Update a Datastore
 *
 *  Method: apigee.organizations.analytics.datastores.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsAnalyticsDatastoresUpdate : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsAnalyticsDatastoresUpdateWithObject:name:]

/**
 *  Required. The resource name of datastore to be updated. Must be of the
 *  form `organizations/{org}/analytics/datastores/{datastoreId}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1Datastore.
 *
 *  Update a Datastore
 *
 *  @param object The @c GTLRApigee_GoogleCloudApigeeV1Datastore to include in
 *    the query.
 *  @param name Required. The resource name of datastore to be updated. Must be
 *    of the
 *    form `organizations/{org}/analytics/datastores/{datastoreId}`
 *
 *  @return GTLRApigeeQuery_OrganizationsAnalyticsDatastoresUpdate
 */
+ (instancetype)queryWithObject:(GTLRApigee_GoogleCloudApigeeV1Datastore *)object
                           name:(NSString *)name;

@end

/**
 *  Updates or creates API product attributes. This API **replaces** the
 *  current list of attributes with the attributes specified in the request
 *  body. In this way, you can update existing attributes, add new attributes,
 *  or delete existing attributes by omitting them from the request body.
 *  OAuth access tokens and Key Management Service (KMS) entities (apps,
 *  developers, and API products) are cached for 180 seconds (current default).
 *  Any custom attributes associated with entities also get cached for at least
 *  180 seconds after entity is accessed during runtime.
 *  In this case, the `ExpiresIn` element on the OAuthV2 policy won't be able
 *  to expire an access token in less than 180 seconds.
 *
 *  Method: apigee.organizations.apiproducts.attributes
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsApiproductsAttributes : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsApiproductsAttributesWithObject:name:]

/**
 *  **Required.** API product name in the following form:
 *  <pre>organizations/<var>organization_ID</var>/apiproducts/<var>api_product_name</var></pre>
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1Attributes.
 *
 *  Updates or creates API product attributes. This API **replaces** the
 *  current list of attributes with the attributes specified in the request
 *  body. In this way, you can update existing attributes, add new attributes,
 *  or delete existing attributes by omitting them from the request body.
 *  OAuth access tokens and Key Management Service (KMS) entities (apps,
 *  developers, and API products) are cached for 180 seconds (current default).
 *  Any custom attributes associated with entities also get cached for at least
 *  180 seconds after entity is accessed during runtime.
 *  In this case, the `ExpiresIn` element on the OAuthV2 policy won't be able
 *  to expire an access token in less than 180 seconds.
 *
 *  @param object The @c GTLRApigee_GoogleCloudApigeeV1Attributes to include in
 *    the query.
 *  @param name **Required.** API product name in the following form:
 *    <pre>organizations/<var>organization_ID</var>/apiproducts/<var>api_product_name</var></pre>
 *
 *  @return GTLRApigeeQuery_OrganizationsApiproductsAttributes
 */
+ (instancetype)queryWithObject:(GTLRApigee_GoogleCloudApigeeV1Attributes *)object
                           name:(NSString *)name;

@end

/**
 *  Deletes an API product attribute.
 *
 *  Method: apigee.organizations.apiproducts.attributes.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsApiproductsAttributesDelete : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsApiproductsAttributesDeleteWithname:]

/**
 *  **Required.** API product name in the following form:
 *  <pre>organizations/<var>organization_ID</var>/apiproducts/<var>api_product_name</var>/attributes/<var>attribute_name</var></pre>
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1Attribute.
 *
 *  Deletes an API product attribute.
 *
 *  @param name **Required.** API product name in the following form:
 *    <pre>organizations/<var>organization_ID</var>/apiproducts/<var>api_product_name</var>/attributes/<var>attribute_name</var></pre>
 *
 *  @return GTLRApigeeQuery_OrganizationsApiproductsAttributesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns the value of an API product attribute.
 *
 *  Method: apigee.organizations.apiproducts.attributes.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsApiproductsAttributesGet : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsApiproductsAttributesGetWithname:]

/**
 *  **Required.** API product name in the following form:
 *  <pre>organizations/<var>organization_ID</var>/apiproducts/<var>api_product_name</var>/attributes/<var>attribute_name</var></pre>
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1Attribute.
 *
 *  Returns the value of an API product attribute.
 *
 *  @param name **Required.** API product name in the following form:
 *    <pre>organizations/<var>organization_ID</var>/apiproducts/<var>api_product_name</var>/attributes/<var>attribute_name</var></pre>
 *
 *  @return GTLRApigeeQuery_OrganizationsApiproductsAttributesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns a list of all API product attributes.
 *
 *  Method: apigee.organizations.apiproducts.attributes.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsApiproductsAttributesList : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsApiproductsAttributesListWithparent:]

/**
 *  Required. The parent organization name. Must be in the following form:
 *  <pre>organizations/<var>organization_ID</var>/apiproducts/<var>api_product_name</var></pre>
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1Attributes.
 *
 *  Returns a list of all API product attributes.
 *
 *  @param parent Required. The parent organization name. Must be in the
 *    following form:
 *    <pre>organizations/<var>organization_ID</var>/apiproducts/<var>api_product_name</var></pre>
 *
 *  @return GTLRApigeeQuery_OrganizationsApiproductsAttributesList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates the value of an API product attribute. Limitations are:
 *  OAuth access tokens and Key Management Service (KMS) entities (apps,
 *  developers, and API products) are cached for 180 seconds (current default).
 *  Any custom attributes associated with entities also get cached for at least
 *  180 seconds after entity is accessed during runtime.
 *  In this case, the `ExpiresIn` element on the OAuthV2 policy won't be able
 *  to expire an access token in less than 180 seconds.
 *
 *  Method: apigee.organizations.apiproducts.attributes.updateApiProductAttribute
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsApiproductsAttributesUpdateApiProductAttribute : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsApiproductsAttributesUpdateApiProductAttributeWithObject:name:]

/**
 *  **Required.** API product name in the following form:
 *  <pre>organizations/<var>organization_ID</var>/apiproducts/<var>api_product_name</var></pre>
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1Attribute.
 *
 *  Updates the value of an API product attribute. Limitations are:
 *  OAuth access tokens and Key Management Service (KMS) entities (apps,
 *  developers, and API products) are cached for 180 seconds (current default).
 *  Any custom attributes associated with entities also get cached for at least
 *  180 seconds after entity is accessed during runtime.
 *  In this case, the `ExpiresIn` element on the OAuthV2 policy won't be able
 *  to expire an access token in less than 180 seconds.
 *
 *  @param object The @c GTLRApigee_GoogleCloudApigeeV1Attribute to include in
 *    the query.
 *  @param name **Required.** API product name in the following form:
 *    <pre>organizations/<var>organization_ID</var>/apiproducts/<var>api_product_name</var></pre>
 *
 *  @return GTLRApigeeQuery_OrganizationsApiproductsAttributesUpdateApiProductAttribute
 */
+ (instancetype)queryWithObject:(GTLRApigee_GoogleCloudApigeeV1Attribute *)object
                           name:(NSString *)name;

@end

/**
 *  Creates an API product in an organization.
 *  You create API products after
 *  you have proxied backend services using API proxies.
 *  An API product is a
 *  collection of API resources combined with quota settings and metadata that
 *  you can use to deliver customized and productized API bundles to your
 *  developer community. This metadata can include:
 *  - Scope
 *  - Environments
 *  - API proxies
 *  - Extensible profile
 *  API products enable you repackage APIs
 *  on-the-fly, without having to do any additional coding or configuration.
 *  Apigee recommends that you start with a simple API product including only
 *  required elements. You then provision credentials to apps to enable them to
 *  start testing your APIs.
 *  After you have authentication and authorization
 *  working against a simple API product, you can iterate to create finer
 *  grained API products, defining different sets of API resources for each API
 *  product.
 *  <aside class="warning"><strong>WARNING:</strong>
 *  - If you don't specify an API proxy in the request body, <em>any</em> app
 *  associated with the product can make calls to <em>any</em> API in your
 *  entire organization.
 *  - If you don't specify an environment in the request body, the product
 *  allows access to all environments.
 *  </aside>
 *  For more information, see {{what_api_product}}
 *
 *  Method: apigee.organizations.apiproducts.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsApiproductsCreate : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsApiproductsCreateWithObject:parent:]

/**
 *  Required. The parent organization name under which the API product will
 *  be created. Must be in the following form:
 *  <pre>organizations/<var>organization_ID</var></pre>
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1ApiProduct.
 *
 *  Creates an API product in an organization.
 *  You create API products after
 *  you have proxied backend services using API proxies.
 *  An API product is a
 *  collection of API resources combined with quota settings and metadata that
 *  you can use to deliver customized and productized API bundles to your
 *  developer community. This metadata can include:
 *  - Scope
 *  - Environments
 *  - API proxies
 *  - Extensible profile
 *  API products enable you repackage APIs
 *  on-the-fly, without having to do any additional coding or configuration.
 *  Apigee recommends that you start with a simple API product including only
 *  required elements. You then provision credentials to apps to enable them to
 *  start testing your APIs.
 *  After you have authentication and authorization
 *  working against a simple API product, you can iterate to create finer
 *  grained API products, defining different sets of API resources for each API
 *  product.
 *  <aside class="warning"><strong>WARNING:</strong>
 *  - If you don't specify an API proxy in the request body, <em>any</em> app
 *  associated with the product can make calls to <em>any</em> API in your
 *  entire organization.
 *  - If you don't specify an environment in the request body, the product
 *  allows access to all environments.
 *  </aside>
 *  For more information, see {{what_api_product}}
 *
 *  @param object The @c GTLRApigee_GoogleCloudApigeeV1ApiProduct to include in
 *    the query.
 *  @param parent Required. The parent organization name under which the API
 *    product will
 *    be created. Must be in the following form:
 *    <pre>organizations/<var>organization_ID</var></pre>
 *
 *  @return GTLRApigeeQuery_OrganizationsApiproductsCreate
 */
+ (instancetype)queryWithObject:(GTLRApigee_GoogleCloudApigeeV1ApiProduct *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes an API product from an organization.
 *  Deleting an API product
 *  causes app requests to the resource URIs defined in the API product to
 *  fail.
 *  Ensure that you create a new API product to serve existing apps, unless
 *  your intention is to disable access to the resources defined in the API
 *  product.
 *  The API product name required in the request URL is the internal name of
 *  the product, not the display name. While they may be the same, it depends
 *  on whether the API product was created via the UI or the API. View the list
 *  of API products to verify the internal name.
 *
 *  Method: apigee.organizations.apiproducts.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsApiproductsDelete : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsApiproductsDeleteWithname:]

/**
 *  Required. API product name in the following form:
 *  <pre>organizations/<var>organization_ID</var>/apiproducts/<var>api_product_name</var></pre>
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1ApiProduct.
 *
 *  Deletes an API product from an organization.
 *  Deleting an API product
 *  causes app requests to the resource URIs defined in the API product to
 *  fail.
 *  Ensure that you create a new API product to serve existing apps, unless
 *  your intention is to disable access to the resources defined in the API
 *  product.
 *  The API product name required in the request URL is the internal name of
 *  the product, not the display name. While they may be the same, it depends
 *  on whether the API product was created via the UI or the API. View the list
 *  of API products to verify the internal name.
 *
 *  @param name Required. API product name in the following form:
 *    <pre>organizations/<var>organization_ID</var>/apiproducts/<var>api_product_name</var></pre>
 *
 *  @return GTLRApigeeQuery_OrganizationsApiproductsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets configuration details for an API product.
 *  The API product name required in the request URL is the internal name of
 *  the product, not the display name. While they may be the same, it depends
 *  on whether the API product was created via the UI or the API. View the list
 *  of API products to verify the internal name.
 *
 *  Method: apigee.organizations.apiproducts.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsApiproductsGet : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsApiproductsGetWithname:]

/**
 *  **Required.** API product name in the following form:
 *  <pre>organizations/<var>organization_ID</var>/apiproducts/<var>api_product_name</var></pre>
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1ApiProduct.
 *
 *  Gets configuration details for an API product.
 *  The API product name required in the request URL is the internal name of
 *  the product, not the display name. While they may be the same, it depends
 *  on whether the API product was created via the UI or the API. View the list
 *  of API products to verify the internal name.
 *
 *  @param name **Required.** API product name in the following form:
 *    <pre>organizations/<var>organization_ID</var>/apiproducts/<var>api_product_name</var></pre>
 *
 *  @return GTLRApigeeQuery_OrganizationsApiproductsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists all API product names for an organization.
 *  Filter the list by passing an `attributename` and `attibutevalue`.
 *  The limit on the number of API products returned by the API is 1000. You
 *  can paginate the list of API products returned using the `startKey` and
 *  `count` query parameters.
 *
 *  Method: apigee.organizations.apiproducts.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsApiproductsList : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsApiproductsListWithparent:]

/** The name of the attribute to search. */
@property(nonatomic, copy, nullable) NSString *attributename;

/** The value of the attribute. */
@property(nonatomic, copy, nullable) NSString *attributevalue;

/**
 *  Enter the number of API products you want returned in the API call. The
 *  limit is 1000.
 */
@property(nonatomic, assign) long long count;

/** Set to `true` to get expanded details about each API. */
@property(nonatomic, assign) BOOL expand;

/**
 *  **Required.** The parent organization name in the following form:
 *  <pre>organizations/<var>organization_ID</var></pre>
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Gets a list of API products starting with a specific API product in the
 *  list. For example, if you're returning 50 API products at a time (using the
 *  `count` query parameter), you can view products 50-99 by entering the name
 *  of the 50th API product in the first API (without using `startKey`).
 *  Product name is case sensitive.
 */
@property(nonatomic, copy, nullable) NSString *startKey;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1ListApiProductsResponse.
 *
 *  Lists all API product names for an organization.
 *  Filter the list by passing an `attributename` and `attibutevalue`.
 *  The limit on the number of API products returned by the API is 1000. You
 *  can paginate the list of API products returned using the `startKey` and
 *  `count` query parameters.
 *
 *  @param parent **Required.** The parent organization name in the following
 *    form:
 *    <pre>organizations/<var>organization_ID</var></pre>
 *
 *  @return GTLRApigeeQuery_OrganizationsApiproductsList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates an existing API product. You must include all required values,
 *  whether or not you are updating them, as well as any optional values that
 *  you are updating.
 *  The API product name required in the request URL is the
 *  internal name of the product, not the Display Name. While they may be the
 *  same, it depends on whether the API product was created via UI or API. View
 *  the list of API products to identify their internal names.
 *
 *  Method: apigee.organizations.apiproducts.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsApiproductsUpdate : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsApiproductsUpdateWithObject:name:]

/**
 *  **Required.** API product name in the following form:
 *  <pre>organizations/<var>organization_ID</var>/apiproducts/<var>api_product_name</var></pre>
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1ApiProduct.
 *
 *  Updates an existing API product. You must include all required values,
 *  whether or not you are updating them, as well as any optional values that
 *  you are updating.
 *  The API product name required in the request URL is the
 *  internal name of the product, not the Display Name. While they may be the
 *  same, it depends on whether the API product was created via UI or API. View
 *  the list of API products to identify their internal names.
 *
 *  @param object The @c GTLRApigee_GoogleCloudApigeeV1ApiProduct to include in
 *    the query.
 *  @param name **Required.** API product name in the following form:
 *    <pre>organizations/<var>organization_ID</var>/apiproducts/<var>api_product_name</var></pre>
 *
 *  @return GTLRApigeeQuery_OrganizationsApiproductsUpdate
 */
+ (instancetype)queryWithObject:(GTLRApigee_GoogleCloudApigeeV1ApiProduct *)object
                           name:(NSString *)name;

@end

/**
 *  Creates an API proxy.
 *  The API proxy created will not be accessible at runtime until it is
 *  deployed to an environment.
 *  Create a new API proxy by setting the `name` query parameter to the
 *  name of the API proxy.
 *  Import an API proxy configuration bundle stored in zip format
 *  on your local machine to your organization by doing the following:
 *  * Set the `name` query parameter to the name of the API proxy.
 *  * Set the `action` query parameter to `import`.
 *  * Set the `Content-Type` header to `multipart/form-data`.
 *  * Pass as a file the name of API proxy
 *  configuration bundle stored in zip format on your local machine using
 *  the `file` form field.
 *  **Note**: To validate the API proxy configuration bundle only
 *  without importing it, set the `action` query
 *  parameter to `validate`.
 *  When importing an API proxy configuration bundle, if the API proxy
 *  does not exist, it will be created.
 *  If the API proxy exists, then a new revision is created. Invalid API
 *  proxy configurations are rejected, and a list of validation errors is
 *  returned to the client.
 *
 *  Method: apigee.organizations.apis.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsApisCreate : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsApisCreateWithObject:parent:]

/**
 *  Action to perform when importing an API proxy configuration bundle. Set
 *  this parameter to one of the following values:
 *  * `import` to import the API proxy configuration bundle.
 *  * `validate` to validate the API proxy configuration bundle without
 *  importing it.
 */
@property(nonatomic, copy, nullable) NSString *action;

/** Name of the API proxy. Restrict the characters used to: A-Za-z0-9._- */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. Name of the organization in the following format:
 *  `organizations/{org}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Ignored. All uploads are validated regardless of the value of this
 *  field. Maintained for compatibility with Apigee Edge API.
 */
@property(nonatomic, assign) BOOL validate;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1ApiProxyRevision.
 *
 *  Creates an API proxy.
 *  The API proxy created will not be accessible at runtime until it is
 *  deployed to an environment.
 *  Create a new API proxy by setting the `name` query parameter to the
 *  name of the API proxy.
 *  Import an API proxy configuration bundle stored in zip format
 *  on your local machine to your organization by doing the following:
 *  * Set the `name` query parameter to the name of the API proxy.
 *  * Set the `action` query parameter to `import`.
 *  * Set the `Content-Type` header to `multipart/form-data`.
 *  * Pass as a file the name of API proxy
 *  configuration bundle stored in zip format on your local machine using
 *  the `file` form field.
 *  **Note**: To validate the API proxy configuration bundle only
 *  without importing it, set the `action` query
 *  parameter to `validate`.
 *  When importing an API proxy configuration bundle, if the API proxy
 *  does not exist, it will be created.
 *  If the API proxy exists, then a new revision is created. Invalid API
 *  proxy configurations are rejected, and a list of validation errors is
 *  returned to the client.
 *
 *  @param object The @c GTLRApigee_GoogleApiHttpBody to include in the query.
 *  @param parent Required. Name of the organization in the following format:
 *    `organizations/{org}`
 *
 *  @return GTLRApigeeQuery_OrganizationsApisCreate
 */
+ (instancetype)queryWithObject:(GTLRApigee_GoogleApiHttpBody *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes an API proxy and all associated endpoints, policies, resources, and
 *  revisions. The API proxy must be undeployed before you can delete it.
 *
 *  Method: apigee.organizations.apis.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsApisDelete : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsApisDeleteWithname:]

/**
 *  Required. Name of the API proxy in the following format:
 *  `organizations/{org}/apis/{api}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1ApiProxy.
 *
 *  Deletes an API proxy and all associated endpoints, policies, resources, and
 *  revisions. The API proxy must be undeployed before you can delete it.
 *
 *  @param name Required. Name of the API proxy in the following format:
 *    `organizations/{org}/apis/{api}`
 *
 *  @return GTLRApigeeQuery_OrganizationsApisDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists all deployments of an API proxy.
 *
 *  Method: apigee.organizations.apis.deployments.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsApisDeploymentsList : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsApisDeploymentsListWithparent:]

/**
 *  Required. Name of the API proxy for which to return deployment information
 *  in the
 *  following format:
 *  `organizations/{org}/apis/{api}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1ListDeploymentsResponse.
 *
 *  Lists all deployments of an API proxy.
 *
 *  @param parent Required. Name of the API proxy for which to return deployment
 *    information in the
 *    following format:
 *    `organizations/{org}/apis/{api}`
 *
 *  @return GTLRApigeeQuery_OrganizationsApisDeploymentsList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Gets an API proxy including a list of existing revisions.
 *
 *  Method: apigee.organizations.apis.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsApisGet : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsApisGetWithname:]

/**
 *  Required. Name of the API proxy in the following format:
 *  `organizations/{org}/apis/{api}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1ApiProxy.
 *
 *  Gets an API proxy including a list of existing revisions.
 *
 *  @param name Required. Name of the API proxy in the following format:
 *    `organizations/{org}/apis/{api}`
 *
 *  @return GTLRApigeeQuery_OrganizationsApisGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Creates a key value map in an api proxy.
 *
 *  Method: apigee.organizations.apis.keyvaluemaps.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsApisKeyvaluemapsCreate : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsApisKeyvaluemapsCreateWithObject:parent:]

/**
 *  Required. The name of the environment in which to create the key value map.
 *  Must be of the form
 *  `organizations/{organization}/apis/{api}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1KeyValueMap.
 *
 *  Creates a key value map in an api proxy.
 *
 *  @param object The @c GTLRApigee_GoogleCloudApigeeV1KeyValueMap to include in
 *    the query.
 *  @param parent Required. The name of the environment in which to create the
 *    key value map.
 *    Must be of the form
 *    `organizations/{organization}/apis/{api}`.
 *
 *  @return GTLRApigeeQuery_OrganizationsApisKeyvaluemapsCreate
 */
+ (instancetype)queryWithObject:(GTLRApigee_GoogleCloudApigeeV1KeyValueMap *)object
                         parent:(NSString *)parent;

@end

/**
 *  Delete a key value map in an api proxy.
 *
 *  Method: apigee.organizations.apis.keyvaluemaps.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsApisKeyvaluemapsDelete : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsApisKeyvaluemapsDeleteWithname:]

/**
 *  Required. The name of the key value map.
 *  Must be of the form
 *  `organizations/{organization}/apis/{api}/keyvaluemaps/{keyvaluemap}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1KeyValueMap.
 *
 *  Delete a key value map in an api proxy.
 *
 *  @param name Required. The name of the key value map.
 *    Must be of the form
 *    `organizations/{organization}/apis/{api}/keyvaluemaps/{keyvaluemap}`.
 *
 *  @return GTLRApigeeQuery_OrganizationsApisKeyvaluemapsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists the names of all API proxies in an organization. The names returned
 *  correspond to the names defined in the configuration files for each API
 *  proxy.
 *
 *  Method: apigee.organizations.apis.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsApisList : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsApisListWithparent:]

/**
 *  Flag that specifies whether to include API proxy metadata in the response.
 */
@property(nonatomic, assign) BOOL includeMetaData;

/**
 *  Flag that specifies whether to include a list of revisions in the response.
 */
@property(nonatomic, assign) BOOL includeRevisions;

/**
 *  Required. Name of the organization in the following format:
 *  `organizations/{org}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1ListApiProxiesResponse.
 *
 *  Lists the names of all API proxies in an organization. The names returned
 *  correspond to the names defined in the configuration files for each API
 *  proxy.
 *
 *  @param parent Required. Name of the organization in the following format:
 *    `organizations/{org}`
 *
 *  @return GTLRApigeeQuery_OrganizationsApisList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Deletes an API proxy revision and all policies, resources, endpoints,
 *  and revisions associated with it. The API proxy revision must be undeployed
 *  before you can delete it.
 *
 *  Method: apigee.organizations.apis.revisions.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsApisRevisionsDelete : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsApisRevisionsDeleteWithname:]

/**
 *  Required. API proxy revision in the following format:
 *  `organizations/{org}/apis/{api}/revisions/{rev}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1ApiProxyRevision.
 *
 *  Deletes an API proxy revision and all policies, resources, endpoints,
 *  and revisions associated with it. The API proxy revision must be undeployed
 *  before you can delete it.
 *
 *  @param name Required. API proxy revision in the following format:
 *    `organizations/{org}/apis/{api}/revisions/{rev}`
 *
 *  @return GTLRApigeeQuery_OrganizationsApisRevisionsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists all deployments of an API proxy revision.
 *
 *  Method: apigee.organizations.apis.revisions.deployments.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsApisRevisionsDeploymentsList : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsApisRevisionsDeploymentsListWithparent:]

/**
 *  Required. Name of the API proxy revision for which to return deployment
 *  information
 *  in the following format:
 *  `organizations/{org}/apis/{api}/revisions/{rev}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1ListDeploymentsResponse.
 *
 *  Lists all deployments of an API proxy revision.
 *
 *  @param parent Required. Name of the API proxy revision for which to return
 *    deployment information
 *    in the following format:
 *    `organizations/{org}/apis/{api}/revisions/{rev}`.
 *
 *  @return GTLRApigeeQuery_OrganizationsApisRevisionsDeploymentsList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Gets an API proxy revision.
 *  To download the API proxy configuration bundle for the specified revision
 *  as a zip file, do the following:
 *  * Set the `format` query parameter to `bundle`.
 *  * Set the `Accept` header to `application/zip`.
 *  If you are using curl, specify `-o filename.zip` to save the output to a
 *  file; otherwise, it displays to `stdout`. Then, develop the API proxy
 *  configuration locally and upload the updated API proxy configuration
 *  revision, as described in
 *  [updateApiProxyRevision](updateApiProxyRevision).
 *
 *  Method: apigee.organizations.apis.revisions.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsApisRevisionsGet : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsApisRevisionsGetWithname:]

/**
 *  Format used when downloading the API proxy configuration revision.
 *  Set to `bundle` to download the API proxy configuration revision as a zip
 *  file.
 */
@property(nonatomic, copy, nullable) NSString *format;

/**
 *  Required. API proxy revision in the following format:
 *  `organizations/{org}/apis/{api}/revisions/{rev}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleApiHttpBody.
 *
 *  Gets an API proxy revision.
 *  To download the API proxy configuration bundle for the specified revision
 *  as a zip file, do the following:
 *  * Set the `format` query parameter to `bundle`.
 *  * Set the `Accept` header to `application/zip`.
 *  If you are using curl, specify `-o filename.zip` to save the output to a
 *  file; otherwise, it displays to `stdout`. Then, develop the API proxy
 *  configuration locally and upload the updated API proxy configuration
 *  revision, as described in
 *  [updateApiProxyRevision](updateApiProxyRevision).
 *
 *  @param name Required. API proxy revision in the following format:
 *    `organizations/{org}/apis/{api}/revisions/{rev}`
 *
 *  @return GTLRApigeeQuery_OrganizationsApisRevisionsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Updates an existing API proxy revision by uploading the API proxy
 *  configuration bundle as a zip file from your local machine.
 *  You can update only API proxy revisions
 *  that have never been deployed. After deployment, an API proxy revision
 *  becomes immutable, even if it is undeployed.
 *  Set the `Content-Type` header to either
 *  `multipart/form-data` or `application/octet-stream`.
 *
 *  Method: apigee.organizations.apis.revisions.updateApiProxyRevision
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsApisRevisionsUpdateApiProxyRevision : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsApisRevisionsUpdateApiProxyRevisionWithObject:name:]

/**
 *  Required. API proxy revision to update in the following format:
 *  `organizations/{org}/apis/{api}/revisions/{rev}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Ignored. All uploads are validated regardless of the value of this field.
 *  Maintained for compatibility with Apigee Edge API.
 */
@property(nonatomic, assign) BOOL validate;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1ApiProxyRevision.
 *
 *  Updates an existing API proxy revision by uploading the API proxy
 *  configuration bundle as a zip file from your local machine.
 *  You can update only API proxy revisions
 *  that have never been deployed. After deployment, an API proxy revision
 *  becomes immutable, even if it is undeployed.
 *  Set the `Content-Type` header to either
 *  `multipart/form-data` or `application/octet-stream`.
 *
 *  @param object The @c GTLRApigee_GoogleApiHttpBody to include in the query.
 *  @param name Required. API proxy revision to update in the following format:
 *    `organizations/{org}/apis/{api}/revisions/{rev}`
 *
 *  @return GTLRApigeeQuery_OrganizationsApisRevisionsUpdateApiProxyRevision
 */
+ (instancetype)queryWithObject:(GTLRApigee_GoogleApiHttpBody *)object
                           name:(NSString *)name;

@end

/**
 *  Gets the app profile for the specified app ID.
 *
 *  Method: apigee.organizations.apps.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsAppsGet : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsAppsGetWithname:]

/**
 *  Required. App ID in the following format:
 *  `organizations/{org}/apps/{app}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1App.
 *
 *  Gets the app profile for the specified app ID.
 *
 *  @param name Required. App ID in the following format:
 *    `organizations/{org}/apps/{app}`
 *
 *  @return GTLRApigeeQuery_OrganizationsAppsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists IDs of apps within an organization that have the specified app status
 *  (approved or revoked) or are of the specified app type
 *  (developer or company).
 *
 *  Method: apigee.organizations.apps.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsAppsList : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsAppsListWithparent:]

/** API product. */
@property(nonatomic, copy, nullable) NSString *apiProduct;

/**
 *  Optional. Filter by the type of the app. Valid values are `company` or
 *  `developer`. Defaults to `developer`.
 */
@property(nonatomic, copy, nullable) NSString *apptype;

/**
 *  Optional. Flag that specifies whether to return an expanded list of
 *  apps for the organization. Defaults to `false`.
 */
@property(nonatomic, assign) BOOL expand;

/** Optional. Comma-separated list of app IDs on which to filter. */
@property(nonatomic, copy, nullable) NSString *ids;

/**
 *  Optional. Flag that specifies whether to include credentials in the
 *  response.
 */
@property(nonatomic, assign) BOOL includeCred;

/**
 *  Optional. Key status of the app. Valid values include `approved` or
 *  `revoked`. Defaults to `approved`.
 */
@property(nonatomic, copy, nullable) NSString *keyStatus;

/**
 *  Required. Resource path of the parent in the following format:
 *  `organizations/{org}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/** Optional. Maximum number of app IDs to return. Defaults to 10000. */
@property(nonatomic, assign) long long rows;

/** Returns the list of apps starting from the specified app ID. */
@property(nonatomic, copy, nullable) NSString *startKey;

/**
 *  Optional. Filter by the status of the app. Valid values are `approved`
 *  or `revoked`. Defaults to `approved`.
 */
@property(nonatomic, copy, nullable) NSString *status;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1ListAppsResponse.
 *
 *  Lists IDs of apps within an organization that have the specified app status
 *  (approved or revoked) or are of the specified app type
 *  (developer or company).
 *
 *  @param parent Required. Resource path of the parent in the following format:
 *    `organizations/{org}`
 *
 *  @return GTLRApigeeQuery_OrganizationsAppsList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Creates an Apigee organization. See
 *  [Create an
 *  organization](https://docs.apigee.com/hybrid/latest/precog-provision).
 *
 *  Method: apigee.organizations.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsCreate : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsCreateWithObject:]

/**
 *  Required. Name of the GCP project in which to associate the Apigee
 *  organization.
 *  Pass the information as a query parameter using the following structure
 *  in your request:
 *  `projects/<project>`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRApigee_GoogleLongrunningOperation.
 *
 *  Creates an Apigee organization. See
 *  [Create an
 *  organization](https://docs.apigee.com/hybrid/latest/precog-provision).
 *
 *  @param object The @c GTLRApigee_GoogleCloudApigeeV1Organization to include
 *    in the query.
 *
 *  @return GTLRApigeeQuery_OrganizationsCreate
 */
+ (instancetype)queryWithObject:(GTLRApigee_GoogleCloudApigeeV1Organization *)object;

@end

/**
 *  Lists all deployments of API proxies or shared flows.
 *
 *  Method: apigee.organizations.deployments.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsDeploymentsList : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsDeploymentsListWithparent:]

/**
 *  Required. Name of the organization for which to return deployment
 *  information in the
 *  following format:
 *  `organizations/{org}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Optional. Flag that specifies whether to return shared flow or API proxy
 *  deployments.
 *  Set to `true` to return shared flow deployments; set to `false`
 *  to return API proxy deployments. Defaults to `false`.
 */
@property(nonatomic, assign) BOOL sharedFlows;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1ListDeploymentsResponse.
 *
 *  Lists all deployments of API proxies or shared flows.
 *
 *  @param parent Required. Name of the organization for which to return
 *    deployment information in the
 *    following format:
 *    `organizations/{org}`
 *
 *  @return GTLRApigeeQuery_OrganizationsDeploymentsList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates attributes for a developer app. This API replaces the
 *  current attributes with those specified in the request.
 *
 *  Method: apigee.organizations.developers.apps.attributes
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsDevelopersAppsAttributes : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsDevelopersAppsAttributesWithObject:name:]

/**
 *  Required. Name of the developer app. Use the following structure in your
 *  request:
 *  `organizations/{org}/developers/{developer_email}/apps/{app}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1Attributes.
 *
 *  Updates attributes for a developer app. This API replaces the
 *  current attributes with those specified in the request.
 *
 *  @param object The @c GTLRApigee_GoogleCloudApigeeV1Attributes to include in
 *    the query.
 *  @param name Required. Name of the developer app. Use the following structure
 *    in your request:
 *    `organizations/{org}/developers/{developer_email}/apps/{app}`
 *
 *  @return GTLRApigeeQuery_OrganizationsDevelopersAppsAttributes
 */
+ (instancetype)queryWithObject:(GTLRApigee_GoogleCloudApigeeV1Attributes *)object
                           name:(NSString *)name;

@end

/**
 *  Deletes a developer app attribute.
 *
 *  Method: apigee.organizations.developers.apps.attributes.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsDevelopersAppsAttributesDelete : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsDevelopersAppsAttributesDeleteWithname:]

/**
 *  Required. Name of the developer app attribute. Use the following structure
 *  in your
 *  request:
 *  `organizations/{org}/developers/{developer_email}/apps/{app}/attributes/{attribute}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1Attribute.
 *
 *  Deletes a developer app attribute.
 *
 *  @param name Required. Name of the developer app attribute. Use the following
 *    structure in your
 *    request:
 *    `organizations/{org}/developers/{developer_email}/apps/{app}/attributes/{attribute}`
 *
 *  @return GTLRApigeeQuery_OrganizationsDevelopersAppsAttributesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns a developer app attribute.
 *
 *  Method: apigee.organizations.developers.apps.attributes.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsDevelopersAppsAttributesGet : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsDevelopersAppsAttributesGetWithname:]

/**
 *  Required. Name of the developer app attribute. Use the following structure
 *  in your
 *  request:
 *  `organizations/{org}/developers/{developer_email}/apps/{app}/attributes/{attribute}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1Attribute.
 *
 *  Returns a developer app attribute.
 *
 *  @param name Required. Name of the developer app attribute. Use the following
 *    structure in your
 *    request:
 *    `organizations/{org}/developers/{developer_email}/apps/{app}/attributes/{attribute}`
 *
 *  @return GTLRApigeeQuery_OrganizationsDevelopersAppsAttributesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns a list of all developer app attributes.
 *
 *  Method: apigee.organizations.developers.apps.attributes.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsDevelopersAppsAttributesList : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsDevelopersAppsAttributesListWithparent:]

/**
 *  Required. Name of the developer app. Use the following structure in your
 *  request:
 *  `organizations/{org}/developers/{developer_email}/apps/{app}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1Attributes.
 *
 *  Returns a list of all developer app attributes.
 *
 *  @param parent Required. Name of the developer app. Use the following
 *    structure in your request:
 *    `organizations/{org}/developers/{developer_email}/apps/{app}`
 *
 *  @return GTLRApigeeQuery_OrganizationsDevelopersAppsAttributesList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a developer app attribute.
 *  **Note**: OAuth access tokens and Key Management Service (KMS) entities
 *  (apps, developers, and API products) are cached for 180 seconds
 *  (current default). Any custom attributes associated with these entities
 *  are cached for at least 180 seconds after the entity is accessed at
 *  runtime. Therefore, an `ExpiresIn` element on the OAuthV2 policy
 *  won't be able to expire an access token in less than 180 seconds.
 *
 *  Method: apigee.organizations.developers.apps.attributes.updateDeveloperAppAttribute
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsDevelopersAppsAttributesUpdateDeveloperAppAttribute : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsDevelopersAppsAttributesUpdateDeveloperAppAttributeWithObject:name:]

/**
 *  Required. Name of the developer app attribute. Use the following structure
 *  in your
 *  request:
 *  `organizations/{org}/developers/{developer_email}/apps/{app}/attributes/{attribute}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1Attribute.
 *
 *  Updates a developer app attribute.
 *  **Note**: OAuth access tokens and Key Management Service (KMS) entities
 *  (apps, developers, and API products) are cached for 180 seconds
 *  (current default). Any custom attributes associated with these entities
 *  are cached for at least 180 seconds after the entity is accessed at
 *  runtime. Therefore, an `ExpiresIn` element on the OAuthV2 policy
 *  won't be able to expire an access token in less than 180 seconds.
 *
 *  @param object The @c GTLRApigee_GoogleCloudApigeeV1Attribute to include in
 *    the query.
 *  @param name Required. Name of the developer app attribute. Use the following
 *    structure in your
 *    request:
 *    `organizations/{org}/developers/{developer_email}/apps/{app}/attributes/{attribute}`
 *
 *  @return GTLRApigeeQuery_OrganizationsDevelopersAppsAttributesUpdateDeveloperAppAttribute
 */
+ (instancetype)queryWithObject:(GTLRApigee_GoogleCloudApigeeV1Attribute *)object
                           name:(NSString *)name;

@end

/**
 *  Creates an app associated with a developer. This API associates the
 *  developer app with the specified API
 *  product and auto-generates an API key for the app to use in calls to API
 *  proxies inside that API product.
 *  The `name` is the unique ID of the app
 *  that you can use in API calls. The `DisplayName` (set as an
 *  attribute) appears in the UI. If you don't set the
 *  `DisplayName` attribute, the `name` appears in the UI.
 *
 *  Method: apigee.organizations.developers.apps.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsDevelopersAppsCreate : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsDevelopersAppsCreateWithObject:parent:]

/**
 *  Required. Name of the developer. Use the following structure in your
 *  request:
 *  `organizations/{org}/developers/{developer_email}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1DeveloperApp.
 *
 *  Creates an app associated with a developer. This API associates the
 *  developer app with the specified API
 *  product and auto-generates an API key for the app to use in calls to API
 *  proxies inside that API product.
 *  The `name` is the unique ID of the app
 *  that you can use in API calls. The `DisplayName` (set as an
 *  attribute) appears in the UI. If you don't set the
 *  `DisplayName` attribute, the `name` appears in the UI.
 *
 *  @param object The @c GTLRApigee_GoogleCloudApigeeV1DeveloperApp to include
 *    in the query.
 *  @param parent Required. Name of the developer. Use the following structure
 *    in your request:
 *    `organizations/{org}/developers/{developer_email}`
 *
 *  @return GTLRApigeeQuery_OrganizationsDevelopersAppsCreate
 */
+ (instancetype)queryWithObject:(GTLRApigee_GoogleCloudApigeeV1DeveloperApp *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a developer app.
 *  **Note**: The delete operation is asynchronous. The developer app is
 *  deleted immediately,
 *  but its associated resources, such as app
 *  keys or access tokens, may take anywhere from a few seconds to a
 *  few minutes to be deleted.
 *
 *  Method: apigee.organizations.developers.apps.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsDevelopersAppsDelete : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsDevelopersAppsDeleteWithname:]

/**
 *  Required. Name of the developer app. Use the following structure in your
 *  request:
 *  `organizations/{org}/developers/{developer_email}/apps/{app}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1DeveloperApp.
 *
 *  Deletes a developer app.
 *  **Note**: The delete operation is asynchronous. The developer app is
 *  deleted immediately,
 *  but its associated resources, such as app
 *  keys or access tokens, may take anywhere from a few seconds to a
 *  few minutes to be deleted.
 *
 *  @param name Required. Name of the developer app. Use the following structure
 *    in your request:
 *    `organizations/{org}/developers/{developer_email}/apps/{app}`
 *
 *  @return GTLRApigeeQuery_OrganizationsDevelopersAppsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Manages access to a developer app by enabling you to:
 *  * Approve or revoke a developer app
 *  * Generate a new consumer key and secret for a developer app
 *  To approve or revoke a developer app, set the `action` query parameter to
 *  `approved` or `revoked`, respectively, and the
 *  `Content-Type` header to `application/octet-stream`. If a developer app is
 *  revoked, none of its API keys are valid for API calls even though
 *  the keys are still `approved`. If successful, the API call returns the
 *  following HTTP status code: `204 No Content`
 *  To generate a new consumer key and secret for a developer
 *  app, pass the new key/secret details. Rather than
 *  replace an existing key, this API generates a new
 *  key. In this case, multiple key
 *  pairs may be associated with a single developer app. Each key pair has an
 *  independent status (`approved` or `revoked`) and expiration time.
 *  Any approved, non-expired key can be used in an API call.
 *  For example, if you're using API key rotation, you can generate new
 *  keys with expiration times that overlap keys that are going to expire.
 *  You might also generate a new consumer key/secret if the security of the
 *  original key/secret is compromised.
 *  The `keyExpiresIn` property defines the
 *  expiration time for the API key in milliseconds. If you don't set
 *  this property or set it to `-1`, the API key never expires.
 *  **Notes**:
 *  * When generating a new key/secret, this API replaces the
 *  existing attributes, notes, and callback URLs with those specified in the
 *  request. Include or exclude any existing information that you want to
 *  retain or delete, respectively.
 *  * To migrate existing consumer keys and secrets to hybrid from another
 *  system, see the
 *  CreateDeveloperAppKey API.
 *
 *  Method: apigee.organizations.developers.apps.generateKeyPairOrUpdateDeveloperAppStatus
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsDevelopersAppsGenerateKeyPairOrUpdateDeveloperAppStatus : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsDevelopersAppsGenerateKeyPairOrUpdateDeveloperAppStatusWithObject:name:]

/** Action. Valid values are `approve` or `revoke`. */
@property(nonatomic, copy, nullable) NSString *action;

/**
 *  Required. Name of the developer app. Use the following structure in your
 *  request:
 *  `organizations/{org}/developers/{developer_email}/apps/{app}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1DeveloperApp.
 *
 *  Manages access to a developer app by enabling you to:
 *  * Approve or revoke a developer app
 *  * Generate a new consumer key and secret for a developer app
 *  To approve or revoke a developer app, set the `action` query parameter to
 *  `approved` or `revoked`, respectively, and the
 *  `Content-Type` header to `application/octet-stream`. If a developer app is
 *  revoked, none of its API keys are valid for API calls even though
 *  the keys are still `approved`. If successful, the API call returns the
 *  following HTTP status code: `204 No Content`
 *  To generate a new consumer key and secret for a developer
 *  app, pass the new key/secret details. Rather than
 *  replace an existing key, this API generates a new
 *  key. In this case, multiple key
 *  pairs may be associated with a single developer app. Each key pair has an
 *  independent status (`approved` or `revoked`) and expiration time.
 *  Any approved, non-expired key can be used in an API call.
 *  For example, if you're using API key rotation, you can generate new
 *  keys with expiration times that overlap keys that are going to expire.
 *  You might also generate a new consumer key/secret if the security of the
 *  original key/secret is compromised.
 *  The `keyExpiresIn` property defines the
 *  expiration time for the API key in milliseconds. If you don't set
 *  this property or set it to `-1`, the API key never expires.
 *  **Notes**:
 *  * When generating a new key/secret, this API replaces the
 *  existing attributes, notes, and callback URLs with those specified in the
 *  request. Include or exclude any existing information that you want to
 *  retain or delete, respectively.
 *  * To migrate existing consumer keys and secrets to hybrid from another
 *  system, see the
 *  CreateDeveloperAppKey API.
 *
 *  @param object The @c GTLRApigee_GoogleCloudApigeeV1DeveloperApp to include
 *    in the query.
 *  @param name Required. Name of the developer app. Use the following structure
 *    in your request:
 *    `organizations/{org}/developers/{developer_email}/apps/{app}`
 *
 *  @return GTLRApigeeQuery_OrganizationsDevelopersAppsGenerateKeyPairOrUpdateDeveloperAppStatus
 */
+ (instancetype)queryWithObject:(GTLRApigee_GoogleCloudApigeeV1DeveloperApp *)object
                           name:(NSString *)name;

@end

/**
 *  Returns the details for a developer app.
 *
 *  Method: apigee.organizations.developers.apps.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsDevelopersAppsGet : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsDevelopersAppsGetWithname:]

/**
 *  **Note**: Must be used in conjunction with the `query` parameter.
 *  Set to `apiresources`
 *  to return the number of API resources
 *  that have been approved for access by a developer app in the
 *  specified Apigee organization.
 */
@property(nonatomic, copy, nullable) NSString *entity;

/**
 *  Required. Name of the developer app. Use the following structure in your
 *  request:
 *  `organizations/{org}/developers/{developer_email}/apps/{app}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  **Note**: Must be used in conjunction with the `entity` parameter.
 *  Set to `count` to return the number of API resources
 *  that have been approved for access by a developer app in the
 *  specified Apigee organization.
 */
@property(nonatomic, copy, nullable) NSString *query;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1DeveloperApp.
 *
 *  Returns the details for a developer app.
 *
 *  @param name Required. Name of the developer app. Use the following structure
 *    in your request:
 *    `organizations/{org}/developers/{developer_email}/apps/{app}`
 *
 *  @return GTLRApigeeQuery_OrganizationsDevelopersAppsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Removes an API product from an app's consumer key. After the API product is
 *  removed, the app cannot access the API resources defined in
 *  that API product.
 *  **Note**: The consumer key is not removed, only its association with the
 *  API product.
 *
 *  Method: apigee.organizations.developers.apps.keys.apiproducts.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsDevelopersAppsKeysApiproductsDelete : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsDevelopersAppsKeysApiproductsDeleteWithname:]

/**
 *  Name of the API product in the developer app key in the following
 *  format:
 *  `organizations/{org}/developers/{developer_email}/apps/{app}/keys/{key}/apiproducts/{apiproduct}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1DeveloperAppKey.
 *
 *  Removes an API product from an app's consumer key. After the API product is
 *  removed, the app cannot access the API resources defined in
 *  that API product.
 *  **Note**: The consumer key is not removed, only its association with the
 *  API product.
 *
 *  @param name Name of the API product in the developer app key in the
 *    following
 *    format:
 *    `organizations/{org}/developers/{developer_email}/apps/{app}/keys/{key}/apiproducts/{apiproduct}`
 *
 *  @return GTLRApigeeQuery_OrganizationsDevelopersAppsKeysApiproductsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Approve or revoke an app's consumer key. After a consumer key is approved,
 *  the app can use it to access APIs.
 *  A consumer key that is revoked or pending cannot be used to access an API.
 *  Any access tokens associated with a revoked consumer key will remain
 *  active. However, Apigee hybrid checks the status of the consumer key and
 *  if set to `revoked` will not allow access to the API.
 *
 *  Method: apigee.organizations.developers.apps.keys.apiproducts.updateDeveloperAppKeyApiProduct
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsDevelopersAppsKeysApiproductsUpdateDeveloperAppKeyApiProduct : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsDevelopersAppsKeysApiproductsUpdateDeveloperAppKeyApiProductWithname:]

/**
 *  Approve or revoke the consumer key by setting this value to
 *  `approve` or `revoke`, respectively.
 */
@property(nonatomic, copy, nullable) NSString *action;

/**
 *  Name of the API product in the developer app key in the following
 *  format:
 *  `organizations/{org}/developers/{developer_email}/apps/{app}/keys/{key}/apiproducts/{apiproduct}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleProtobufEmpty.
 *
 *  Approve or revoke an app's consumer key. After a consumer key is approved,
 *  the app can use it to access APIs.
 *  A consumer key that is revoked or pending cannot be used to access an API.
 *  Any access tokens associated with a revoked consumer key will remain
 *  active. However, Apigee hybrid checks the status of the consumer key and
 *  if set to `revoked` will not allow access to the API.
 *
 *  @param name Name of the API product in the developer app key in the
 *    following
 *    format:
 *    `organizations/{org}/developers/{developer_email}/apps/{app}/keys/{key}/apiproducts/{apiproduct}`
 *
 *  @return GTLRApigeeQuery_OrganizationsDevelopersAppsKeysApiproductsUpdateDeveloperAppKeyApiProduct
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Creates a custom consumer key and secret for a developer app. This is
 *  particularly useful if you want to migrate existing consumer keys and
 *  secrets to Apigee hybrid from another system.
 *  Consumer keys and secrets can contain letters, numbers, underscores, and
 *  hyphens. No other special characters are allowed. To avoid service
 *  disruptions, a consumer key and secret should not exceed 2 KBs each.
 *  **Note**: When creating the consumer key and secret, an association to
 *  API products will not be made. Therefore, you should not specify the
 *  associated API products in your request. Instead, use the
 *  UpdateDeveloperAppKey API to
 *  make the association after the consumer key and secret are created.
 *  If a consumer key and secret already exist, you can keep them or
 *  delete them using the
 *  DeleteDeveloperAppKey API.
 *
 *  Method: apigee.organizations.developers.apps.keys.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsDevelopersAppsKeysCreate : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsDevelopersAppsKeysCreateWithObject:parent:]

/**
 *  Parent of the developer app key. Use the following structure in your
 *  request:
 *  `organizations/{org}/developers/{developer_email}/apps`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1DeveloperAppKey.
 *
 *  Creates a custom consumer key and secret for a developer app. This is
 *  particularly useful if you want to migrate existing consumer keys and
 *  secrets to Apigee hybrid from another system.
 *  Consumer keys and secrets can contain letters, numbers, underscores, and
 *  hyphens. No other special characters are allowed. To avoid service
 *  disruptions, a consumer key and secret should not exceed 2 KBs each.
 *  **Note**: When creating the consumer key and secret, an association to
 *  API products will not be made. Therefore, you should not specify the
 *  associated API products in your request. Instead, use the
 *  UpdateDeveloperAppKey API to
 *  make the association after the consumer key and secret are created.
 *  If a consumer key and secret already exist, you can keep them or
 *  delete them using the
 *  DeleteDeveloperAppKey API.
 *
 *  @param object The @c GTLRApigee_GoogleCloudApigeeV1DeveloperAppKey to
 *    include in the query.
 *  @param parent Parent of the developer app key. Use the following structure
 *    in your
 *    request:
 *    `organizations/{org}/developers/{developer_email}/apps`
 *
 *  @return GTLRApigeeQuery_OrganizationsDevelopersAppsKeysCreate
 */
+ (instancetype)queryWithObject:(GTLRApigee_GoogleCloudApigeeV1DeveloperAppKey *)object
                         parent:(NSString *)parent;

@end

/**
 *  Creates a custom consumer key and secret for a developer app. This is
 *  particularly useful if you want to migrate existing consumer keys and
 *  secrets to Apigee hybrid from another system.
 *  Consumer keys and secrets can contain letters, numbers, underscores, and
 *  hyphens. No other special characters are allowed. To avoid service
 *  disruptions, a consumer key and secret should not exceed 2 KBs each.
 *  **Note**: When creating the consumer key and secret, an association to
 *  API products will not be made. Therefore, you should not specify the
 *  associated API products in your request. Instead, use the
 *  UpdateDeveloperAppKey API to
 *  make the association after the consumer key and secret are created.
 *  If a consumer key and secret already exist, you can keep them or
 *  delete them using the
 *  DeleteDeveloperAppKey API.
 *
 *  Method: apigee.organizations.developers.apps.keys.create.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsDevelopersAppsKeysCreateCreate : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsDevelopersAppsKeysCreateCreateWithObject:parent:]

/**
 *  Parent of the developer app key. Use the following structure in your
 *  request:
 *  `organizations/{org}/developers/{developer_email}/apps`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1DeveloperAppKey.
 *
 *  Creates a custom consumer key and secret for a developer app. This is
 *  particularly useful if you want to migrate existing consumer keys and
 *  secrets to Apigee hybrid from another system.
 *  Consumer keys and secrets can contain letters, numbers, underscores, and
 *  hyphens. No other special characters are allowed. To avoid service
 *  disruptions, a consumer key and secret should not exceed 2 KBs each.
 *  **Note**: When creating the consumer key and secret, an association to
 *  API products will not be made. Therefore, you should not specify the
 *  associated API products in your request. Instead, use the
 *  UpdateDeveloperAppKey API to
 *  make the association after the consumer key and secret are created.
 *  If a consumer key and secret already exist, you can keep them or
 *  delete them using the
 *  DeleteDeveloperAppKey API.
 *
 *  @param object The @c GTLRApigee_GoogleCloudApigeeV1DeveloperAppKey to
 *    include in the query.
 *  @param parent Parent of the developer app key. Use the following structure
 *    in your
 *    request:
 *    `organizations/{org}/developers/{developer_email}/apps`
 *
 *  @return GTLRApigeeQuery_OrganizationsDevelopersAppsKeysCreateCreate
 */
+ (instancetype)queryWithObject:(GTLRApigee_GoogleCloudApigeeV1DeveloperAppKey *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes an app's consumer key and removes all API products
 *  associated with the app. After the consumer key is deleted,
 *  it cannot be used to access any APIs.
 *  **Note**: After you delete a consumer key, you may want to:
 *  1. Create a new consumer key and secret for the developer app using the
 *  CreateDeveloperAppKey API, and
 *  subsequently add an API product to the key using the
 *  UpdateDeveloperAppKey API.
 *  2. Delete the developer app, if it is no longer required.
 *
 *  Method: apigee.organizations.developers.apps.keys.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsDevelopersAppsKeysDelete : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsDevelopersAppsKeysDeleteWithname:]

/**
 *  Name of the developer app key. Use the following structure in your request:
 *  `organizations/{org}/developers/{developer_email}/apps/{app}/keys/{key}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1DeveloperAppKey.
 *
 *  Deletes an app's consumer key and removes all API products
 *  associated with the app. After the consumer key is deleted,
 *  it cannot be used to access any APIs.
 *  **Note**: After you delete a consumer key, you may want to:
 *  1. Create a new consumer key and secret for the developer app using the
 *  CreateDeveloperAppKey API, and
 *  subsequently add an API product to the key using the
 *  UpdateDeveloperAppKey API.
 *  2. Delete the developer app, if it is no longer required.
 *
 *  @param name Name of the developer app key. Use the following structure in
 *    your request:
 *    `organizations/{org}/developers/{developer_email}/apps/{app}/keys/{key}`
 *
 *  @return GTLRApigeeQuery_OrganizationsDevelopersAppsKeysDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns details for a consumer key for a developer app, including the key
 *  and secret value, associated API products, and other information.
 *
 *  Method: apigee.organizations.developers.apps.keys.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsDevelopersAppsKeysGet : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsDevelopersAppsKeysGetWithname:]

/**
 *  Name of the developer app key. Use the following structure in your request:
 *  `organizations/{org}/developers/{developer_email}/apps/{app}/keys/{key}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1DeveloperAppKey.
 *
 *  Returns details for a consumer key for a developer app, including the key
 *  and secret value, associated API products, and other information.
 *
 *  @param name Name of the developer app key. Use the following structure in
 *    your request:
 *    `organizations/{org}/developers/{developer_email}/apps/{app}/keys/{key}`
 *
 *  @return GTLRApigeeQuery_OrganizationsDevelopersAppsKeysGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Updates the scope of an app.
 *  This API replaces the
 *  existing scopes with those specified in the request.
 *  Include or exclude any existing scopes that you want to retain or
 *  delete, respectively. The specified scopes must already
 *  be defined for the API products associated with the app.
 *  This API sets the `scopes` element
 *  under the `apiProducts` element in the attributes of the app.
 *
 *  Method: apigee.organizations.developers.apps.keys.replaceDeveloperAppKey
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsDevelopersAppsKeysReplaceDeveloperAppKey : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsDevelopersAppsKeysReplaceDeveloperAppKeyWithObject:name:]

/**
 *  Name of the developer app key. Use the following structure in your request:
 *  `organizations/{org}/developers/{developer_email}/apps/{app}/keys/{key}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1DeveloperAppKey.
 *
 *  Updates the scope of an app.
 *  This API replaces the
 *  existing scopes with those specified in the request.
 *  Include or exclude any existing scopes that you want to retain or
 *  delete, respectively. The specified scopes must already
 *  be defined for the API products associated with the app.
 *  This API sets the `scopes` element
 *  under the `apiProducts` element in the attributes of the app.
 *
 *  @param object The @c GTLRApigee_GoogleCloudApigeeV1DeveloperAppKey to
 *    include in the query.
 *  @param name Name of the developer app key. Use the following structure in
 *    your request:
 *    `organizations/{org}/developers/{developer_email}/apps/{app}/keys/{key}`
 *
 *  @return GTLRApigeeQuery_OrganizationsDevelopersAppsKeysReplaceDeveloperAppKey
 */
+ (instancetype)queryWithObject:(GTLRApigee_GoogleCloudApigeeV1DeveloperAppKey *)object
                           name:(NSString *)name;

@end

/**
 *  Adds an API product to a developer app key, enabling the app that holds
 *  the key to access the API resources bundled in the API product.
 *  In addition, you can add
 *  attributes to a developer app key. This API replaces the
 *  existing attributes with those specified in the request.
 *  Include or exclude any existing attributes that you want to retain or
 *  delete, respectively.
 *  You can use the same key to access all API products
 *  associated with the app.
 *
 *  Method: apigee.organizations.developers.apps.keys.updateDeveloperAppKey
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsDevelopersAppsKeysUpdateDeveloperAppKey : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsDevelopersAppsKeysUpdateDeveloperAppKeyWithObject:name:]

/**
 *  Approve or revoke the consumer key by setting this value to
 *  `approve` or `revoke`, respectively.
 */
@property(nonatomic, copy, nullable) NSString *action;

/**
 *  Name of the developer app key. Use the following structure in your request:
 *  `organizations/{org}/developers/{developer_email}/apps/{app}/keys/{key}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1DeveloperAppKey.
 *
 *  Adds an API product to a developer app key, enabling the app that holds
 *  the key to access the API resources bundled in the API product.
 *  In addition, you can add
 *  attributes to a developer app key. This API replaces the
 *  existing attributes with those specified in the request.
 *  Include or exclude any existing attributes that you want to retain or
 *  delete, respectively.
 *  You can use the same key to access all API products
 *  associated with the app.
 *
 *  @param object The @c GTLRApigee_GoogleCloudApigeeV1DeveloperAppKey to
 *    include in the query.
 *  @param name Name of the developer app key. Use the following structure in
 *    your request:
 *    `organizations/{org}/developers/{developer_email}/apps/{app}/keys/{key}`
 *
 *  @return GTLRApigeeQuery_OrganizationsDevelopersAppsKeysUpdateDeveloperAppKey
 */
+ (instancetype)queryWithObject:(GTLRApigee_GoogleCloudApigeeV1DeveloperAppKey *)object
                           name:(NSString *)name;

@end

/**
 *  Lists all apps created by a developer in an Apigee organization.
 *  Optionally, you can request an expanded view of the developer apps.
 *  A maximum of 100 developer apps are returned per API call. You can paginate
 *  the list of deveoper apps returned using the `startKey` and `count` query
 *  parameters.
 *
 *  Method: apigee.organizations.developers.apps.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsDevelopersAppsList : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsDevelopersAppsListWithparent:]

/**
 *  Number of developer apps to return in the API call. Use with the `startKey`
 *  parameter to provide more targeted filtering.
 *  The limit is 1000.
 */
@property(nonatomic, assign) long long count;

/**
 *  Optional. Specifies whether to expand the results. Set to `true`
 *  to expand the results. This query parameter is not valid if you use
 *  the `count` or `startKey` query parameters.
 */
@property(nonatomic, assign) BOOL expand;

/**
 *  Required. Name of the developer. Use the following structure in your
 *  request:
 *  `organizations/{org}/developers/{developer_email}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Optional. Specifies whether to expand the results in shallow mode.
 *  Set to `true` to expand the results in shallow mode.
 */
@property(nonatomic, assign) BOOL shallowExpand;

/**
 *  **Note**: Must be used in conjunction with the `count` parameter.
 *  Name of the developer app from which to start displaying the list of
 *  developer apps. For example, if you're returning 50 developer apps at
 *  a time (using the `count` query parameter), you can view developer apps
 *  50-99 by entering the name of the 50th developer app.
 *  The developer app name is case sensitive.
 */
@property(nonatomic, copy, nullable) NSString *startKey;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1ListDeveloperAppsResponse.
 *
 *  Lists all apps created by a developer in an Apigee organization.
 *  Optionally, you can request an expanded view of the developer apps.
 *  A maximum of 100 developer apps are returned per API call. You can paginate
 *  the list of deveoper apps returned using the `startKey` and `count` query
 *  parameters.
 *
 *  @param parent Required. Name of the developer. Use the following structure
 *    in your request:
 *    `organizations/{org}/developers/{developer_email}`
 *
 *  @return GTLRApigeeQuery_OrganizationsDevelopersAppsList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates the details for a developer app. In addition, you can
 *  add an API product to a developer app and automatically generate
 *  an API key for the app to use when calling APIs in the API product.
 *  If you want to use an existing API key for the API product,
 *  add the API product to the API key using the
 *  UpdateDeveloperAppKey
 *  API.
 *  Using this API, you cannot update the following:
 *  * App name as it is the primary key used to identify the app and cannot
 *  be changed.
 *  * Scopes associated with the app. Instead, use the
 *  ReplaceDeveloperAppKey API.
 *  This API replaces the
 *  existing attributes with those specified in the request.
 *  Include or exclude any existing attributes that you want to retain or
 *  delete, respectively.
 *
 *  Method: apigee.organizations.developers.apps.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsDevelopersAppsUpdate : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsDevelopersAppsUpdateWithObject:name:]

/**
 *  Required. Name of the developer app. Use the following structure in your
 *  request:
 *  `organizations/{org}/developers/{developer_email}/apps/{app}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1DeveloperApp.
 *
 *  Updates the details for a developer app. In addition, you can
 *  add an API product to a developer app and automatically generate
 *  an API key for the app to use when calling APIs in the API product.
 *  If you want to use an existing API key for the API product,
 *  add the API product to the API key using the
 *  UpdateDeveloperAppKey
 *  API.
 *  Using this API, you cannot update the following:
 *  * App name as it is the primary key used to identify the app and cannot
 *  be changed.
 *  * Scopes associated with the app. Instead, use the
 *  ReplaceDeveloperAppKey API.
 *  This API replaces the
 *  existing attributes with those specified in the request.
 *  Include or exclude any existing attributes that you want to retain or
 *  delete, respectively.
 *
 *  @param object The @c GTLRApigee_GoogleCloudApigeeV1DeveloperApp to include
 *    in the query.
 *  @param name Required. Name of the developer app. Use the following structure
 *    in your request:
 *    `organizations/{org}/developers/{developer_email}/apps/{app}`
 *
 *  @return GTLRApigeeQuery_OrganizationsDevelopersAppsUpdate
 */
+ (instancetype)queryWithObject:(GTLRApigee_GoogleCloudApigeeV1DeveloperApp *)object
                           name:(NSString *)name;

@end

/**
 *  Updates developer attributes.
 *  This API replaces the
 *  existing attributes with those specified in the request.
 *  Add new attributes, and include or exclude any existing
 *  attributes that you want to retain or
 *  remove, respectively.
 *  The custom attribute limit is 18.
 *  **Note**: OAuth access tokens and Key Management Service (KMS) entities
 *  (apps, developers, and API products) are cached for 180 seconds
 *  (default). Any custom attributes associated with these entities
 *  are cached for at least 180 seconds after the entity is accessed at
 *  runtime. Therefore, an `ExpiresIn` element on the OAuthV2 policy
 *  won't be able to expire an access token in less than 180 seconds.
 *
 *  Method: apigee.organizations.developers.attributes
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsDevelopersAttributes : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsDevelopersAttributesWithObject:parent:]

/**
 *  Required. Email address of the developer for which attributes are being
 *  updated in
 *  the following format:
 *  `organizations/{org}/developers/{developer_email}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1Attributes.
 *
 *  Updates developer attributes.
 *  This API replaces the
 *  existing attributes with those specified in the request.
 *  Add new attributes, and include or exclude any existing
 *  attributes that you want to retain or
 *  remove, respectively.
 *  The custom attribute limit is 18.
 *  **Note**: OAuth access tokens and Key Management Service (KMS) entities
 *  (apps, developers, and API products) are cached for 180 seconds
 *  (default). Any custom attributes associated with these entities
 *  are cached for at least 180 seconds after the entity is accessed at
 *  runtime. Therefore, an `ExpiresIn` element on the OAuthV2 policy
 *  won't be able to expire an access token in less than 180 seconds.
 *
 *  @param object The @c GTLRApigee_GoogleCloudApigeeV1Attributes to include in
 *    the query.
 *  @param parent Required. Email address of the developer for which attributes
 *    are being updated in
 *    the following format:
 *    `organizations/{org}/developers/{developer_email}`
 *
 *  @return GTLRApigeeQuery_OrganizationsDevelopersAttributes
 */
+ (instancetype)queryWithObject:(GTLRApigee_GoogleCloudApigeeV1Attributes *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a developer attribute.
 *
 *  Method: apigee.organizations.developers.attributes.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsDevelopersAttributesDelete : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsDevelopersAttributesDeleteWithname:]

/**
 *  Required. Name of the developer attribute. Use the following structure in
 *  your
 *  request:
 *  `organizations/{org}/developers/{developer_email}/attributes/{attribute}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1Attribute.
 *
 *  Deletes a developer attribute.
 *
 *  @param name Required. Name of the developer attribute. Use the following
 *    structure in your
 *    request:
 *    `organizations/{org}/developers/{developer_email}/attributes/{attribute}`
 *
 *  @return GTLRApigeeQuery_OrganizationsDevelopersAttributesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns the value of the specified developer attribute.
 *
 *  Method: apigee.organizations.developers.attributes.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsDevelopersAttributesGet : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsDevelopersAttributesGetWithname:]

/**
 *  Required. Name of the developer attribute. Use the following structure in
 *  your
 *  request:
 *  `organizations/{org}/developers/{developer_email}/attributes/{attribute}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1Attribute.
 *
 *  Returns the value of the specified developer attribute.
 *
 *  @param name Required. Name of the developer attribute. Use the following
 *    structure in your
 *    request:
 *    `organizations/{org}/developers/{developer_email}/attributes/{attribute}`
 *
 *  @return GTLRApigeeQuery_OrganizationsDevelopersAttributesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns a list of all developer attributes.
 *
 *  Method: apigee.organizations.developers.attributes.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsDevelopersAttributesList : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsDevelopersAttributesListWithparent:]

/**
 *  Required. Email address of the developer for which attributes are being
 *  listed in the
 *  following format:
 *  `organizations/{org}/developers/{developer_email}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1Attributes.
 *
 *  Returns a list of all developer attributes.
 *
 *  @param parent Required. Email address of the developer for which attributes
 *    are being listed in the
 *    following format:
 *    `organizations/{org}/developers/{developer_email}`
 *
 *  @return GTLRApigeeQuery_OrganizationsDevelopersAttributesList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a developer attribute.
 *  **Note**: OAuth access tokens and Key Management Service (KMS) entities
 *  (apps, developers, and API products) are cached for 180 seconds
 *  (default). Any custom attributes associated with these entities
 *  are cached for at least 180 seconds after the entity is accessed at
 *  runtime. Therefore, an `ExpiresIn` element on the OAuthV2 policy
 *  won't be able to expire an access token in less than 180 seconds.
 *
 *  Method: apigee.organizations.developers.attributes.updateDeveloperAttribute
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsDevelopersAttributesUpdateDeveloperAttribute : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsDevelopersAttributesUpdateDeveloperAttributeWithObject:name:]

/**
 *  Required. Name of the developer attribute. Use the following structure in
 *  your
 *  request:
 *  `organizations/{org}/developers/{developer_email}/attributes/{attribute}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1Attribute.
 *
 *  Updates a developer attribute.
 *  **Note**: OAuth access tokens and Key Management Service (KMS) entities
 *  (apps, developers, and API products) are cached for 180 seconds
 *  (default). Any custom attributes associated with these entities
 *  are cached for at least 180 seconds after the entity is accessed at
 *  runtime. Therefore, an `ExpiresIn` element on the OAuthV2 policy
 *  won't be able to expire an access token in less than 180 seconds.
 *
 *  @param object The @c GTLRApigee_GoogleCloudApigeeV1Attribute to include in
 *    the query.
 *  @param name Required. Name of the developer attribute. Use the following
 *    structure in your
 *    request:
 *    `organizations/{org}/developers/{developer_email}/attributes/{attribute}`
 *
 *  @return GTLRApigeeQuery_OrganizationsDevelopersAttributesUpdateDeveloperAttribute
 */
+ (instancetype)queryWithObject:(GTLRApigee_GoogleCloudApigeeV1Attribute *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a developer. Once created,
 *  the developer can register an app and obtain an API key.
 *  At creation time, a developer is set as `active`. To change the developer
 *  status, use the SetDeveloperStatus API.
 *
 *  Method: apigee.organizations.developers.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsDevelopersCreate : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsDevelopersCreateWithObject:parent:]

/**
 *  Required. Name of the Apigee organization in which the developer is created.
 *  Use the following structure in your request:
 *  `organizations/{org}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1Developer.
 *
 *  Creates a developer. Once created,
 *  the developer can register an app and obtain an API key.
 *  At creation time, a developer is set as `active`. To change the developer
 *  status, use the SetDeveloperStatus API.
 *
 *  @param object The @c GTLRApigee_GoogleCloudApigeeV1Developer to include in
 *    the query.
 *  @param parent Required. Name of the Apigee organization in which the
 *    developer is created.
 *    Use the following structure in your request:
 *    `organizations/{org}`.
 *
 *  @return GTLRApigeeQuery_OrganizationsDevelopersCreate
 */
+ (instancetype)queryWithObject:(GTLRApigee_GoogleCloudApigeeV1Developer *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a developer. All apps and API keys associated
 *  with the developer are also removed.
 *  **Warning**: This API will permanently delete the developer
 *  and related artifacts.
 *  To avoid permanently deleting developers and their artifacts,
 *  set the developer status to `inactive` using
 *  the SetDeveloperStatus API.
 *  **Note**: The delete operation is asynchronous. The developer app is
 *  deleted immediately,
 *  but its associated resources, such as apps and API keys, may take anywhere
 *  from a few seconds to a few minutes to be deleted.
 *
 *  Method: apigee.organizations.developers.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsDevelopersDelete : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsDevelopersDeleteWithname:]

/**
 *  Required. Email address of the developer. Use the following structure in
 *  your
 *  request:
 *  `organizations/{org}/developers/{developer_email}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1Developer.
 *
 *  Deletes a developer. All apps and API keys associated
 *  with the developer are also removed.
 *  **Warning**: This API will permanently delete the developer
 *  and related artifacts.
 *  To avoid permanently deleting developers and their artifacts,
 *  set the developer status to `inactive` using
 *  the SetDeveloperStatus API.
 *  **Note**: The delete operation is asynchronous. The developer app is
 *  deleted immediately,
 *  but its associated resources, such as apps and API keys, may take anywhere
 *  from a few seconds to a few minutes to be deleted.
 *
 *  @param name Required. Email address of the developer. Use the following
 *    structure in your
 *    request:
 *    `organizations/{org}/developers/{developer_email}`
 *
 *  @return GTLRApigeeQuery_OrganizationsDevelopersDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns the developer details, including the
 *  developer's name, email address, apps, and other information.
 *  **Note**: The response includes only the first 100 developer apps.
 *
 *  Method: apigee.organizations.developers.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsDevelopersGet : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsDevelopersGetWithname:]

/** Status of the developer. Valid values are `active` or `inactive`. */
@property(nonatomic, copy, nullable) NSString *action;

/**
 *  Required. Email address of the developer. Use the following structure in
 *  your
 *  request:
 *  `organizations/{org}/developers/{developer_email}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1Developer.
 *
 *  Returns the developer details, including the
 *  developer's name, email address, apps, and other information.
 *  **Note**: The response includes only the first 100 developer apps.
 *
 *  @param name Required. Email address of the developer. Use the following
 *    structure in your
 *    request:
 *    `organizations/{org}/developers/{developer_email}`
 *
 *  @return GTLRApigeeQuery_OrganizationsDevelopersGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists all developers in an organization by email address.
 *  By default,
 *  the response does not include company developers. Set the `includeCompany`
 *  query parameter to `true` to include company developers.
 *  **Note**: A maximum of 1000 developers are returned in the response. You
 *  paginate the list of developers returned using the `startKey` and `count`
 *  query parameters.
 *
 *  Method: apigee.organizations.developers.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsDevelopersList : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsDevelopersListWithparent:]

/**
 *  Optional. Number of developers to return in the API call. Use with the
 *  `startKey`
 *  parameter to provide more targeted filtering.
 *  The limit is 1000.
 */
@property(nonatomic, assign) long long count;

/**
 *  Specifies whether to expand the results. Set to `true`
 *  to expand the results. This query parameter is not valid if you use
 *  the `count` or `startKey` query parameters.
 */
@property(nonatomic, assign) BOOL expand;

/** Optional. List of IDs to include, separated by commas. */
@property(nonatomic, copy, nullable) NSString *ids;

/** Flag that specifies whether to include company details in the response. */
@property(nonatomic, assign) BOOL includeCompany;

/**
 *  Required. Name of the Apigee organization. Use the following structure in
 *  your
 *  request:
 *  `organizations/{org}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  **Note**: Must be used in conjunction with the `count` parameter.
 *  Email address of the developer from which to start displaying the list of
 *  developers. For example, if the an unfiltered list returns:
 *  ```
 *  westley\@example.com
 *  fezzik\@example.com
 *  buttercup\@example.com
 *  ```
 *  and your `startKey` is `fezzik\@example.com`, the list returned will be
 *  ```
 *  fezzik\@example.com
 *  buttercup\@example.com
 *  ```
 */
@property(nonatomic, copy, nullable) NSString *startKey;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1ListOfDevelopersResponse.
 *
 *  Lists all developers in an organization by email address.
 *  By default,
 *  the response does not include company developers. Set the `includeCompany`
 *  query parameter to `true` to include company developers.
 *  **Note**: A maximum of 1000 developers are returned in the response. You
 *  paginate the list of developers returned using the `startKey` and `count`
 *  query parameters.
 *
 *  @param parent Required. Name of the Apigee organization. Use the following
 *    structure in your
 *    request:
 *    `organizations/{org}`.
 *
 *  @return GTLRApigeeQuery_OrganizationsDevelopersList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Sets the status of a developer. Valid values are `active` or `inactive`.
 *  A developer is `active` by default. If you set a developer's status to
 *  `inactive`, the API keys assigned to the developer apps are no longer valid
 *  even though the API keys are set to `approved`. Inactive developers
 *  can still sign in to the developer portal and create apps; however, any
 *  new API keys generated during app creation won't work.
 *  If successful, the API call returns the
 *  following HTTP status code: `204 No Content`
 *
 *  Method: apigee.organizations.developers.setDeveloperStatus
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsDevelopersSetDeveloperStatus : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsDevelopersSetDeveloperStatusWithname:]

/** Status of the developer. Valid values are `active` and `inactive`. */
@property(nonatomic, copy, nullable) NSString *action;

/**
 *  Required. Email address of the developer. Use the following structure in
 *  your
 *  request:
 *  `organizations/{org}/developers/{developer_email}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleProtobufEmpty.
 *
 *  Sets the status of a developer. Valid values are `active` or `inactive`.
 *  A developer is `active` by default. If you set a developer's status to
 *  `inactive`, the API keys assigned to the developer apps are no longer valid
 *  even though the API keys are set to `approved`. Inactive developers
 *  can still sign in to the developer portal and create apps; however, any
 *  new API keys generated during app creation won't work.
 *  If successful, the API call returns the
 *  following HTTP status code: `204 No Content`
 *
 *  @param name Required. Email address of the developer. Use the following
 *    structure in your
 *    request:
 *    `organizations/{org}/developers/{developer_email}`
 *
 *  @return GTLRApigeeQuery_OrganizationsDevelopersSetDeveloperStatus
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Updates a developer.
 *  This API replaces the existing developer details with those specified
 *  in the request. Include or exclude any existing details that
 *  you want to retain or delete, respectively.
 *  The custom attribute limit is 18.
 *  **Note**: OAuth access tokens and Key Management Service (KMS) entities
 *  (apps, developers, and API products) are cached for 180 seconds
 *  (current default). Any custom attributes associated with these entities
 *  are cached for at least 180 seconds after the entity is accessed at
 *  runtime. Therefore, an `ExpiresIn` element on the OAuthV2 policy
 *  won't be able to expire an access token in less than 180 seconds.
 *
 *  Method: apigee.organizations.developers.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsDevelopersUpdate : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsDevelopersUpdateWithObject:name:]

/**
 *  Required. Email address of the developer. Use the following structure in
 *  your
 *  request:
 *  `organizations/{org}/developers/{developer_email}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1Developer.
 *
 *  Updates a developer.
 *  This API replaces the existing developer details with those specified
 *  in the request. Include or exclude any existing details that
 *  you want to retain or delete, respectively.
 *  The custom attribute limit is 18.
 *  **Note**: OAuth access tokens and Key Management Service (KMS) entities
 *  (apps, developers, and API products) are cached for 180 seconds
 *  (current default). Any custom attributes associated with these entities
 *  are cached for at least 180 seconds after the entity is accessed at
 *  runtime. Therefore, an `ExpiresIn` element on the OAuthV2 policy
 *  won't be able to expire an access token in less than 180 seconds.
 *
 *  @param object The @c GTLRApigee_GoogleCloudApigeeV1Developer to include in
 *    the query.
 *  @param name Required. Email address of the developer. Use the following
 *    structure in your
 *    request:
 *    `organizations/{org}/developers/{developer_email}`
 *
 *  @return GTLRApigeeQuery_OrganizationsDevelopersUpdate
 */
+ (instancetype)queryWithObject:(GTLRApigee_GoogleCloudApigeeV1Developer *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a new attachment of an environment to an environment group.
 *
 *  Method: apigee.organizations.envgroups.attachments.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvgroupsAttachmentsCreate : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvgroupsAttachmentsCreateWithObject:parent:]

/**
 *  Required. EnvironmentGroup under which to create the attachment in the
 *  following
 *  format: `organizations/{org}/envgroups/{envgroup}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRApigee_GoogleLongrunningOperation.
 *
 *  Creates a new attachment of an environment to an environment group.
 *
 *  @param object The @c
 *    GTLRApigee_GoogleCloudApigeeV1EnvironmentGroupAttachment to include in the
 *    query.
 *  @param parent Required. EnvironmentGroup under which to create the
 *    attachment in the following
 *    format: `organizations/{org}/envgroups/{envgroup}`.
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvgroupsAttachmentsCreate
 */
+ (instancetype)queryWithObject:(GTLRApigee_GoogleCloudApigeeV1EnvironmentGroupAttachment *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes an environment group attachment.
 *
 *  Method: apigee.organizations.envgroups.attachments.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvgroupsAttachmentsDelete : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvgroupsAttachmentsDeleteWithname:]

/**
 *  Required. Name of the environment group attachment to delete in the
 *  following format:
 *  `organizations/{org}/envgroups/{envgroup}/attachments/{attachment}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleLongrunningOperation.
 *
 *  Deletes an environment group attachment.
 *
 *  @param name Required. Name of the environment group attachment to delete in
 *    the following format:
 *    `organizations/{org}/envgroups/{envgroup}/attachments/{attachment}`.
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvgroupsAttachmentsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets an environment group attachment.
 *
 *  Method: apigee.organizations.envgroups.attachments.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvgroupsAttachmentsGet : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvgroupsAttachmentsGetWithname:]

/**
 *  Required. Name of the environment group attachment in the following format:
 *  `organizations/{org}/envgroups/{envgroup}/attachments/{attachment}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1EnvironmentGroupAttachment.
 *
 *  Gets an environment group attachment.
 *
 *  @param name Required. Name of the environment group attachment in the
 *    following format:
 *    `organizations/{org}/envgroups/{envgroup}/attachments/{attachment}`
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvgroupsAttachmentsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists all attachments of an environment group.
 *
 *  Method: apigee.organizations.envgroups.attachments.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvgroupsAttachmentsList : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvgroupsAttachmentsListWithparent:]

/**
 *  Maximum number of environment group attachments to return. The page size
 *  defaults to 25.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Page token, returned by a previous ListEnvironmentGroupAttachments call,
 *  that you can use to retrieve the next page.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. Name of the organization in the following format:
 *  `organizations/{org}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRApigee_GoogleCloudApigeeV1ListEnvironmentGroupAttachmentsResponse.
 *
 *  Lists all attachments of an environment group.
 *
 *  @param parent Required. Name of the organization in the following format:
 *    `organizations/{org}`.
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvgroupsAttachmentsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Creates a new environment group.
 *
 *  Method: apigee.organizations.envgroups.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvgroupsCreate : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvgroupsCreateWithObject:parent:]

/**
 *  ID of the environment group. Overrides any ID in the environment_group
 *  resource.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. Name of the organization in which to create the environment group
 *  in the
 *  following format: `organizations/{org}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRApigee_GoogleLongrunningOperation.
 *
 *  Creates a new environment group.
 *
 *  @param object The @c GTLRApigee_GoogleCloudApigeeV1EnvironmentGroup to
 *    include in the query.
 *  @param parent Required. Name of the organization in which to create the
 *    environment group in the
 *    following format: `organizations/{org}`.
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvgroupsCreate
 */
+ (instancetype)queryWithObject:(GTLRApigee_GoogleCloudApigeeV1EnvironmentGroup *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes an environment group.
 *
 *  Method: apigee.organizations.envgroups.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvgroupsDelete : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvgroupsDeleteWithname:]

/**
 *  Required. Name of the environment group in the following format:
 *  `organizations/{org}/envgroups/{envgroup}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleLongrunningOperation.
 *
 *  Deletes an environment group.
 *
 *  @param name Required. Name of the environment group in the following format:
 *    `organizations/{org}/envgroups/{envgroup}`.
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvgroupsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets an environment group.
 *
 *  Method: apigee.organizations.envgroups.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvgroupsGet : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvgroupsGetWithname:]

/**
 *  Required. Name of the environment group in the following format:
 *  `organizations/{org}/envgroups/{envgroup}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1EnvironmentGroup.
 *
 *  Gets an environment group.
 *
 *  @param name Required. Name of the environment group in the following format:
 *    `organizations/{org}/envgroups/{envgroup}`.
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvgroupsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists all environment groups.
 *
 *  Method: apigee.organizations.envgroups.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvgroupsList : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvgroupsListWithparent:]

/**
 *  Maximum number of environment groups to return. The page size defaults
 *  to 25.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Page token, returned from a previous ListEnvironmentGroups call, that you
 *  can use to retrieve the next page.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. Name of the organization for which to list environment groups in
 *  the
 *  following format: `organizations/{org}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1ListEnvironmentGroupsResponse.
 *
 *  Lists all environment groups.
 *
 *  @param parent Required. Name of the organization for which to list
 *    environment groups in the
 *    following format: `organizations/{org}`.
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvgroupsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates an environment group.
 *
 *  Method: apigee.organizations.envgroups.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvgroupsPatch : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvgroupsPatchWithObject:name:]

/**
 *  Required. Name of the environment group to update in the format:
 *  `organizations/{org}/envgroups/{envgroup}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  List of fields to be updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRApigee_GoogleLongrunningOperation.
 *
 *  Updates an environment group.
 *
 *  @param object The @c GTLRApigee_GoogleCloudApigeeV1EnvironmentGroup to
 *    include in the query.
 *  @param name Required. Name of the environment group to update in the format:
 *    `organizations/{org}/envgroups/{envgroup}.
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvgroupsPatch
 */
+ (instancetype)queryWithObject:(GTLRApigee_GoogleCloudApigeeV1EnvironmentGroup *)object
                           name:(NSString *)name;

@end

/**
 *  Get a list of metrics and dimensions which can be used for creating
 *  analytics queries and reports.
 *  Each schema element contains the name of the field with its associated type
 *  and if it is either custom field or standard field.
 *
 *  Method: apigee.organizations.environments.analytics.admin.getSchemav2
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsAnalyticsAdminGetSchemav2 : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsAnalyticsAdminGetSchemav2Withname:]

/**
 *  Required. The parent organization and environment names. Must be of the
 *  form `organizations/{org}/environments/{env}/analytics/admin/schemav2`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. Type refers to the dataset name whose schema needs to be
 *  retrieved E.g. type=fact or type=agg_cus1
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1Schema.
 *
 *  Get a list of metrics and dimensions which can be used for creating
 *  analytics queries and reports.
 *  Each schema element contains the name of the field with its associated type
 *  and if it is either custom field or standard field.
 *
 *  @param name Required. The parent organization and environment names. Must be
 *    of the
 *    form `organizations/{org}/environments/{env}/analytics/admin/schemav2`.
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsAnalyticsAdminGetSchemav2
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Submit a data export job to be processed in the background.
 *  If the request is successful, the API returns a 201 status, a URI that can
 *  be used to retrieve the status of the export job, and the `state` value of
 *  "enqueued".
 *
 *  Method: apigee.organizations.environments.analytics.exports.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsAnalyticsExportsCreate : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsAnalyticsExportsCreateWithObject:parent:]

/**
 *  Required. Names of the parent organization and environment.
 *  Must be of the form `organizations/{org}/environments/{env}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1Export.
 *
 *  Submit a data export job to be processed in the background.
 *  If the request is successful, the API returns a 201 status, a URI that can
 *  be used to retrieve the status of the export job, and the `state` value of
 *  "enqueued".
 *
 *  @param object The @c GTLRApigee_GoogleCloudApigeeV1ExportRequest to include
 *    in the query.
 *  @param parent Required. Names of the parent organization and environment.
 *    Must be of the form `organizations/{org}/environments/{env}`.
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsAnalyticsExportsCreate
 */
+ (instancetype)queryWithObject:(GTLRApigee_GoogleCloudApigeeV1ExportRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Gets the details and status of an analytics export job.
 *  If the export job is still in progress, its `state` is set to "running".
 *  After the export job has completed successfully, its `state` is set to
 *  "completed".
 *  If the export job fails, its `state` is set to `failed`.
 *
 *  Method: apigee.organizations.environments.analytics.exports.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsAnalyticsExportsGet : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsAnalyticsExportsGetWithname:]

/** Required. Resource name of the export to get. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1Export.
 *
 *  Gets the details and status of an analytics export job.
 *  If the export job is still in progress, its `state` is set to "running".
 *  After the export job has completed successfully, its `state` is set to
 *  "completed".
 *  If the export job fails, its `state` is set to `failed`.
 *
 *  @param name Required. Resource name of the export to get.
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsAnalyticsExportsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists the details and status of all analytics export jobs belonging to the
 *  parent organization and environment.
 *
 *  Method: apigee.organizations.environments.analytics.exports.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsAnalyticsExportsList : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsAnalyticsExportsListWithparent:]

/**
 *  Required. Names of the parent organization and environment.
 *  Must be of the form `organizations/{org}/environments/{env}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1ListExportsResponse.
 *
 *  Lists the details and status of all analytics export jobs belonging to the
 *  parent organization and environment.
 *
 *  @param parent Required. Names of the parent organization and environment.
 *    Must be of the form `organizations/{org}/environments/{env}`.
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsAnalyticsExportsList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Lists all deployments of an API proxy in an environment.
 *
 *  Method: apigee.organizations.environments.apis.deployments.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsApisDeploymentsList : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsApisDeploymentsListWithparent:]

/**
 *  Required. Name representing an API proxy in an environment in the following
 *  format:
 *  `organizations/{org}/environments/{env}/apis/{api}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1ListDeploymentsResponse.
 *
 *  Lists all deployments of an API proxy in an environment.
 *
 *  @param parent Required. Name representing an API proxy in an environment in
 *    the following
 *    format:
 *    `organizations/{org}/environments/{env}/apis/{api}`
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsApisDeploymentsList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Creates a debug session for a deployed API Proxy revision.
 *
 *  Method: apigee.organizations.environments.apis.revisions.debugsessions.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsApisRevisionsDebugsessionsCreate : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsApisRevisionsDebugsessionsCreateWithObject:parent:]

/**
 *  Required. The resource name of the API Proxy revision deployment for which
 *  to create the DebugSession. Must be of the form
 *  `organizations/{organization}/environments/{environment}/apis/{api}/revisions/{revision}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Optional. The time in seconds after which this DebugSession should end.
 *  A timeout specified in DebugSession will overwrite this value.
 */
@property(nonatomic, assign) long long timeout;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1DebugSession.
 *
 *  Creates a debug session for a deployed API Proxy revision.
 *
 *  @param object The @c GTLRApigee_GoogleCloudApigeeV1DebugSession to include
 *    in the query.
 *  @param parent Required. The resource name of the API Proxy revision
 *    deployment for which
 *    to create the DebugSession. Must be of the form
 *    `organizations/{organization}/environments/{environment}/apis/{api}/revisions/{revision}`.
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsApisRevisionsDebugsessionsCreate
 */
+ (instancetype)queryWithObject:(GTLRApigee_GoogleCloudApigeeV1DebugSession *)object
                         parent:(NSString *)parent;

@end

/**
 *  Gets the debug data from a transaction.
 *
 *  Method: apigee.organizations.environments.apis.revisions.debugsessions.data.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsApisRevisionsDebugsessionsDataGet : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsApisRevisionsDebugsessionsDataGetWithname:]

/**
 *  Required. The name of the debug session transaction. Must be of the form:
 *  `organizations/{organization}/environments/{environment}/apis/{api}/revisions/{revision}/debugsessions/{session}/data/{transaction}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1DebugSessionTransaction.
 *
 *  Gets the debug data from a transaction.
 *
 *  @param name Required. The name of the debug session transaction. Must be of
 *    the form:
 *    `organizations/{organization}/environments/{environment}/apis/{api}/revisions/{revision}/debugsessions/{session}/data/{transaction}`.
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsApisRevisionsDebugsessionsDataGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Deletes the data from a debug session. This does not cancel the debug
 *  session or prevent further data from being collected if the session is
 *  still active in runtime pods.
 *
 *  Method: apigee.organizations.environments.apis.revisions.debugsessions.deleteData
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsApisRevisionsDebugsessionsDeleteData : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsApisRevisionsDebugsessionsDeleteDataWithname:]

/**
 *  Required. The name of the debug session to delete.
 *  Must be of the form:
 *  `organizations/{organization}/environments/{environment}/apis/{api}/revisions/{revision}/debugsessions/{debugsession}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleProtobufEmpty.
 *
 *  Deletes the data from a debug session. This does not cancel the debug
 *  session or prevent further data from being collected if the session is
 *  still active in runtime pods.
 *
 *  @param name Required. The name of the debug session to delete.
 *    Must be of the form:
 *    `organizations/{organization}/environments/{environment}/apis/{api}/revisions/{revision}/debugsessions/{debugsession}`.
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsApisRevisionsDebugsessionsDeleteData
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Retrieves a debug session.
 *
 *  Method: apigee.organizations.environments.apis.revisions.debugsessions.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsApisRevisionsDebugsessionsGet : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsApisRevisionsDebugsessionsGetWithname:]

/**
 *  Required. The name of the debug session to retrieve.
 *  Must be of the form:
 *  `organizations/{organization}/environments/{environment}/apis/{api}/revisions/{revision}/debugsessions/{session}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1DebugSession.
 *
 *  Retrieves a debug session.
 *
 *  @param name Required. The name of the debug session to retrieve.
 *    Must be of the form:
 *    `organizations/{organization}/environments/{environment}/apis/{api}/revisions/{revision}/debugsessions/{session}`.
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsApisRevisionsDebugsessionsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists debug sessions that are currently active in the given API Proxy
 *  revision.
 *
 *  Method: apigee.organizations.environments.apis.revisions.debugsessions.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsApisRevisionsDebugsessionsList : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsApisRevisionsDebugsessionsListWithparent:]

/**
 *  Maximum number of debug sessions to return. The page size defaults
 *  to 25.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Page token, returned from a previous ListDebugSessions call, that you
 *  can use to retrieve the next page.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The name of the API Proxy revision deployment for which
 *  to list debug sessions. Must be of the form:
 *  `organizations/{organization}/environments/{environment}/apis/{api}/revisions/{revision}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1ListDebugSessionsResponse.
 *
 *  Lists debug sessions that are currently active in the given API Proxy
 *  revision.
 *
 *  @param parent Required. The name of the API Proxy revision deployment for
 *    which
 *    to list debug sessions. Must be of the form:
 *    `organizations/{organization}/environments/{environment}/apis/{api}/revisions/{revision}`.
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsApisRevisionsDebugsessionsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Undeploys an API proxy revision from an environment.
 *  Because multiple revisions of the same API proxy can be deployed in
 *  the same environment if the base paths are different, you must specify the
 *  revision number of the API proxy.
 *
 *  Method: apigee.organizations.environments.apis.revisions.deployments
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsApisRevisionsDeployments : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsApisRevisionsDeploymentsWithname:]

/**
 *  Required. Name of the API proxy revision deployment in the following format:
 *  `organizations/{org}/environments/{env}/apis/{api}/revisions/{rev}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  If true, a best-effort attempt will be made to remove the environment group
 *  routing rules corresponding to this deployment before removing the
 *  deployment from the runtime. This is likely to be a rare use case; it is
 *  only needed when the intended effect of undeploying this proxy is to cause
 *  the traffic it currently handles to be rerouted to some other existing
 *  proxy in the environment group. The GenerateUndeployChangeReport API may be
 *  used to examine routing changes before issuing the undeployment request,
 *  and its response will indicate if a sequenced rollout is recommended for
 *  the undeployment.
 */
@property(nonatomic, assign) BOOL sequencedRollout;

/**
 *  Fetches a @c GTLRApigee_GoogleProtobufEmpty.
 *
 *  Undeploys an API proxy revision from an environment.
 *  Because multiple revisions of the same API proxy can be deployed in
 *  the same environment if the base paths are different, you must specify the
 *  revision number of the API proxy.
 *
 *  @param name Required. Name of the API proxy revision deployment in the
 *    following format:
 *    `organizations/{org}/environments/{env}/apis/{api}/revisions/{rev}`
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsApisRevisionsDeployments
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Generates a report for a dry run analysis of a DeployApiProxy request
 *  without committing the deployment.
 *  In addition to the standard validations performed when adding deployments,
 *  additional analysis will be done to detect possible traffic routing changes
 *  that would result from this deployment being created. Any potential routing
 *  conflicts or unsafe changes will be reported in the response. This routing
 *  analysis is not performed for a non-dry-run DeployApiProxy request.
 *
 *  Method: apigee.organizations.environments.apis.revisions.deployments.generateDeployChangeReport
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsApisRevisionsDeploymentsGenerateDeployChangeReport : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsApisRevisionsDeploymentsGenerateDeployChangeReportWithname:]

/**
 *  Base path where the API proxy revision should be deployed. Defaults to '/'
 *  if not provided.
 */
@property(nonatomic, copy, nullable) NSString *basepath;

/**
 *  Name of the API proxy revision deployment in the following format:
 *  `organizations/{org}/environments/{env}/apis/{api}/revisions/{rev}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Flag that specifies whether to force the deployment of the new revision
 *  over the currently deployed revision by overriding conflict checks.
 */
@property(nonatomic, assign) BOOL override;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1DeploymentChangeReport.
 *
 *  Generates a report for a dry run analysis of a DeployApiProxy request
 *  without committing the deployment.
 *  In addition to the standard validations performed when adding deployments,
 *  additional analysis will be done to detect possible traffic routing changes
 *  that would result from this deployment being created. Any potential routing
 *  conflicts or unsafe changes will be reported in the response. This routing
 *  analysis is not performed for a non-dry-run DeployApiProxy request.
 *
 *  @param name Name of the API proxy revision deployment in the following
 *    format:
 *    `organizations/{org}/environments/{env}/apis/{api}/revisions/{rev}`
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsApisRevisionsDeploymentsGenerateDeployChangeReport
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Generates a report for a dry run analysis of an UndeployApiProxy request
 *  without committing the undeploy.
 *  In addition to the standard validations performed when removing
 *  deployments, additional analysis will be done to detect possible traffic
 *  routing changes that would result from this deployment being removed. Any
 *  potential routing conflicts or unsafe changes will be reported in the
 *  response. This routing analysis is not performed for a non-dry-run
 *  UndeployApiProxy request.
 *
 *  Method: apigee.organizations.environments.apis.revisions.deployments.generateUndeployChangeReport
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsApisRevisionsDeploymentsGenerateUndeployChangeReport : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsApisRevisionsDeploymentsGenerateUndeployChangeReportWithname:]

/**
 *  Name of the API proxy revision deployment in the following format:
 *  `organizations/{org}/environments/{env}/apis/{api}/revisions/{rev}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1DeploymentChangeReport.
 *
 *  Generates a report for a dry run analysis of an UndeployApiProxy request
 *  without committing the undeploy.
 *  In addition to the standard validations performed when removing
 *  deployments, additional analysis will be done to detect possible traffic
 *  routing changes that would result from this deployment being removed. Any
 *  potential routing conflicts or unsafe changes will be reported in the
 *  response. This routing analysis is not performed for a non-dry-run
 *  UndeployApiProxy request.
 *
 *  @param name Name of the API proxy revision deployment in the following
 *    format:
 *    `organizations/{org}/environments/{env}/apis/{api}/revisions/{rev}`
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsApisRevisionsDeploymentsGenerateUndeployChangeReport
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the deployment of an API proxy revision and actual state reported by
 *  runtime pods.
 *
 *  Method: apigee.organizations.environments.apis.revisions.getDeployments
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsApisRevisionsGetDeployments : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsApisRevisionsGetDeploymentsWithname:]

/**
 *  Required. Name representing an API proxy revision in an
 *  environment in the following format:
 *  `organizations/{org}/environments/{env}/apis/{api}/revisions/{rev}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1Deployment.
 *
 *  Gets the deployment of an API proxy revision and actual state reported by
 *  runtime pods.
 *
 *  @param name Required. Name representing an API proxy revision in an
 *    environment in the following format:
 *    `organizations/{org}/environments/{env}/apis/{api}/revisions/{rev}`
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsApisRevisionsGetDeployments
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Deletes a cache.
 *
 *  Method: apigee.organizations.environments.caches.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsCachesDelete : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsCachesDeleteWithname:]

/**
 *  Required. Cache resource name of the form:
 *  `organizations/{organization_id}/environments/{environment_id}/caches/{cache_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleProtobufEmpty.
 *
 *  Deletes a cache.
 *
 *  @param name Required. Cache resource name of the form:
 *    `organizations/{organization_id}/environments/{environment_id}/caches/{cache_id}`
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsCachesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Creates an environment in an organization.
 *
 *  Method: apigee.organizations.environments.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsCreate : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsCreateWithObject:parent:]

/**
 *  Optional. Name of the environment. Alternatively, the name may
 *  be specified in the request body in the
 *  name field.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. Name of the organization in which the environment will
 *  be created. Use the following structure in your request:
 *  `organizations/{org}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRApigee_GoogleLongrunningOperation.
 *
 *  Creates an environment in an organization.
 *
 *  @param object The @c GTLRApigee_GoogleCloudApigeeV1Environment to include in
 *    the query.
 *  @param parent Required. Name of the organization in which the environment
 *    will
 *    be created. Use the following structure in your request:
 *    `organizations/{org}`
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsCreate
 */
+ (instancetype)queryWithObject:(GTLRApigee_GoogleCloudApigeeV1Environment *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes an environment from an organization.
 *
 *  Method: apigee.organizations.environments.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsDelete : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsDeleteWithname:]

/**
 *  Required. Name of the environment. Use the following structure in your
 *  request:
 *  `organizations/{org}/environments/{env}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleLongrunningOperation.
 *
 *  Deletes an environment from an organization.
 *
 *  @param name Required. Name of the environment. Use the following structure
 *    in your
 *    request:
 *    `organizations/{org}/environments/{env}`
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists all deployments of API proxies or shared flows in an environment.
 *
 *  Method: apigee.organizations.environments.deployments.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsDeploymentsList : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsDeploymentsListWithparent:]

/**
 *  Required. Name of the environment for which to return deployment information
 *  in the
 *  following format:
 *  `organizations/{org}/environments/{env}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Optional. Flag that specifies whether to return shared flow or API proxy
 *  deployments.
 *  Set to `true` to return shared flow deployments; set to `false`
 *  to return API proxy deployments. Defaults to `false`.
 */
@property(nonatomic, assign) BOOL sharedFlows;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1ListDeploymentsResponse.
 *
 *  Lists all deployments of API proxies or shared flows in an environment.
 *
 *  @param parent Required. Name of the environment for which to return
 *    deployment information in the
 *    following format:
 *    `organizations/{org}/environments/{env}`
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsDeploymentsList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Attaches a shared flow to a flow hook.
 *
 *  Method: apigee.organizations.environments.flowhooks.attachSharedFlowToFlowHook
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsFlowhooksAttachSharedFlowToFlowHook : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsFlowhooksAttachSharedFlowToFlowHookWithObject:name:]

/**
 *  Required. Name of the flow hook to which the shared flow should be
 *  attached in the following format:
 *  `organizations/{org}/environments/{env}/flowhooks/{flowhook}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1FlowHook.
 *
 *  Attaches a shared flow to a flow hook.
 *
 *  @param object The @c GTLRApigee_GoogleCloudApigeeV1FlowHook to include in
 *    the query.
 *  @param name Required. Name of the flow hook to which the shared flow should
 *    be
 *    attached in the following format:
 *    `organizations/{org}/environments/{env}/flowhooks/{flowhook}`
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsFlowhooksAttachSharedFlowToFlowHook
 */
+ (instancetype)queryWithObject:(GTLRApigee_GoogleCloudApigeeV1FlowHook *)object
                           name:(NSString *)name;

@end

/**
 *  Detaches a shared flow from a flow hook.
 *
 *  Method: apigee.organizations.environments.flowhooks.detachSharedFlowFromFlowHook
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsFlowhooksDetachSharedFlowFromFlowHook : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsFlowhooksDetachSharedFlowFromFlowHookWithname:]

/**
 *  Required. Name of the flow hook to detach in the following format:
 *  `organizations/{org}/environments/{env}/flowhooks/{flowhook}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1FlowHook.
 *
 *  Detaches a shared flow from a flow hook.
 *
 *  @param name Required. Name of the flow hook to detach in the following
 *    format:
 *    `organizations/{org}/environments/{env}/flowhooks/{flowhook}`
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsFlowhooksDetachSharedFlowFromFlowHook
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns the name of the shared flow attached to the specified flow hook. If
 *  there's no shared flow attached to the flow hook, the API does not return
 *  an error; it simply does not return a name in the response.
 *
 *  Method: apigee.organizations.environments.flowhooks.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsFlowhooksGet : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsFlowhooksGetWithname:]

/**
 *  Required. Name of the flow hook in the following format:
 *  `organizations/{org}/environments/{env}/flowhooks/{flowhook}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1FlowHook.
 *
 *  Returns the name of the shared flow attached to the specified flow hook. If
 *  there's no shared flow attached to the flow hook, the API does not return
 *  an error; it simply does not return a name in the response.
 *
 *  @param name Required. Name of the flow hook in the following format:
 *    `organizations/{org}/environments/{env}/flowhooks/{flowhook}`
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsFlowhooksGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets environment details.
 *
 *  Method: apigee.organizations.environments.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsGet : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsGetWithname:]

/**
 *  Required. Name of the environment. Use the following structure in your
 *  request:
 *  `organizations/{org}/environments/{env}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1Environment.
 *
 *  Gets environment details.
 *
 *  @param name Required. Name of the environment. Use the following structure
 *    in your request:
 *    `organizations/{org}/environments/{env}`
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the debug mask singleton resource for an environment.
 *
 *  Method: apigee.organizations.environments.getDebugmask
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsGetDebugmask : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsGetDebugmaskWithname:]

/**
 *  Required. Name of the debug mask. Use the following structure in your
 *  request:
 *  `organizations/{org}/environments/{env}/debugmask`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1DebugMask.
 *
 *  Gets the debug mask singleton resource for an environment.
 *
 *  @param name Required. Name of the debug mask. Use the following structure in
 *    your request:
 *    `organizations/{org}/environments/{env}/debugmask`.
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsGetDebugmask
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the deployed configuration for an environment.
 *
 *  Method: apigee.organizations.environments.getDeployedConfig
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsGetDeployedConfig : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsGetDeployedConfigWithname:]

/**
 *  Required. Name of the environment deployed configuration resource. Use the
 *  following
 *  structure in your request:
 *  `organizations/{org}/environments/{env}/deployedConfig`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1EnvironmentConfig.
 *
 *  Gets the deployed configuration for an environment.
 *
 *  @param name Required. Name of the environment deployed configuration
 *    resource. Use the following
 *    structure in your request:
 *    `organizations/{org}/environments/{env}/deployedConfig`
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsGetDeployedConfig
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the IAM policy on an environment. For more information, see
 *  [Manage users, roles, and permissions
 *  using the API](https://docs.apigee.com/hybrid/latest/manage-users-roles).
 *  You must have the `apigee.environments.getIamPolicy` permission to call
 *  this API.
 *
 *  Method: apigee.organizations.environments.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsGetIamPolicy : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsGetIamPolicyWithresource:]

/**
 *  Optional. The policy format version to be returned.
 *  Valid values are 0, 1, and 3. Requests specifying an invalid value will be
 *  rejected.
 *  Requests for policies with any conditional bindings must specify version 3.
 *  Policies without any conditional bindings may specify any valid value or
 *  leave the field unset.
 *  To learn which resources support conditions in their IAM policies, see the
 *  [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, assign) NSInteger optionsRequestedPolicyVersion;

/**
 *  REQUIRED: The resource for which the policy is being requested.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRApigee_GoogleIamV1Policy.
 *
 *  Gets the IAM policy on an environment. For more information, see
 *  [Manage users, roles, and permissions
 *  using the API](https://docs.apigee.com/hybrid/latest/manage-users-roles).
 *  You must have the `apigee.environments.getIamPolicy` permission to call
 *  this API.
 *
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsGetIamPolicy
 */
+ (instancetype)queryWithResource:(NSString *)resource;

@end

/**
 *  Creates an alias from a key, certificate pair.
 *  The structure of the request is controlled by the `format` query parameter:
 *  * `keycertfile` - Separate PEM-encoded key and certificate files are
 *  uploaded. The request must have `Content-Type: multipart/form-data` and
 *  include fields `keyFile` and `certFile`. If uploading to a truststore,
 *  omit `keyFile`.
 *  * `pkcs12` - A PKCS12 file is uploaded. The request must have
 *  `Content-Type: multipart/form-data` with the file provided in the only
 *  field.
 *  * `selfsignedcert` - A new private key and certificate are generated. The
 *  request must have `Content-Type: application/json` and a body of
 *  CertificateGenerationSpec.
 *
 *  Method: apigee.organizations.environments.keystores.aliases.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsKeystoresAliasesCreate : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsKeystoresAliasesCreateWithObject:parent:]

/** The password for the private key file, if it exists. */
@property(nonatomic, copy, nullable) NSString *xPassword;

/**
 *  The alias for the key, certificate pair. Values must match
 *  regular expression `[\\w\\s-.]{1,255}`. This must be provided for all
 *  formats
 *  except 'selfsignedcert'; self-signed certs may specify the alias in either
 *  this parameter or the JSON body.
 */
@property(nonatomic, copy, nullable) NSString *alias;

/**
 *  Required. The format of the data. Must be either `selfsignedcert`,
 *  `keycertfile`, or `pkcs12`.
 */
@property(nonatomic, copy, nullable) NSString *format;

/** If `true`, no expiry validation will be performed. */
@property(nonatomic, assign) BOOL ignoreExpiryValidation;

/**
 *  If `true`, do not throw an error when the file contains a chain with no
 *  newline between each certificate. By default, a newline is needed between
 *  each certificate in a chain.
 */
@property(nonatomic, assign) BOOL ignoreNewlineValidation;

/**
 *  Required. The name of the keystore. Must be of the form
 *  `organizations/{organization}/environments/{environment}/keystores/{keystore}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1Alias.
 *
 *  Creates an alias from a key, certificate pair.
 *  The structure of the request is controlled by the `format` query parameter:
 *  * `keycertfile` - Separate PEM-encoded key and certificate files are
 *  uploaded. The request must have `Content-Type: multipart/form-data` and
 *  include fields `keyFile` and `certFile`. If uploading to a truststore,
 *  omit `keyFile`.
 *  * `pkcs12` - A PKCS12 file is uploaded. The request must have
 *  `Content-Type: multipart/form-data` with the file provided in the only
 *  field.
 *  * `selfsignedcert` - A new private key and certificate are generated. The
 *  request must have `Content-Type: application/json` and a body of
 *  CertificateGenerationSpec.
 *
 *  @param object The @c GTLRApigee_GoogleApiHttpBody to include in the query.
 *  @param parent Required. The name of the keystore. Must be of the form
 *    `organizations/{organization}/environments/{environment}/keystores/{keystore}`.
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsKeystoresAliasesCreate
 */
+ (instancetype)queryWithObject:(GTLRApigee_GoogleApiHttpBody *)object
                         parent:(NSString *)parent;

@end

/**
 *  Generates a PKCS #10 Certificate Signing Request for the private key in
 *  an alias.
 *
 *  Method: apigee.organizations.environments.keystores.aliases.csr
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsKeystoresAliasesCsr : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsKeystoresAliasesCsrWithname:]

/**
 *  Required. The name of the alias. Must be of the form
 *  `organizations/{organization}/environments/{environment}/keystores/{keystore}/aliases/{alias}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleApiHttpBody.
 *
 *  Generates a PKCS #10 Certificate Signing Request for the private key in
 *  an alias.
 *
 *  @param name Required. The name of the alias. Must be of the form
 *    `organizations/{organization}/environments/{environment}/keystores/{keystore}/aliases/{alias}`.
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsKeystoresAliasesCsr
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Deletes an alias.
 *
 *  Method: apigee.organizations.environments.keystores.aliases.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsKeystoresAliasesDelete : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsKeystoresAliasesDeleteWithname:]

/**
 *  Required. The name of the alias. Must be of the form
 *  `organizations/{organization}/environments/{environment}/keystores/{keystore}/aliases/{alias}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1Alias.
 *
 *  Deletes an alias.
 *
 *  @param name Required. The name of the alias. Must be of the form
 *    `organizations/{organization}/environments/{environment}/keystores/{keystore}/aliases/{alias}`.
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsKeystoresAliasesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets an alias.
 *
 *  Method: apigee.organizations.environments.keystores.aliases.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsKeystoresAliasesGet : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsKeystoresAliasesGetWithname:]

/**
 *  Required. The name of the alias. Must be of the form
 *  `organizations/{organization}/environments/{environment}/keystores/{keystore}/aliases/{alias}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1Alias.
 *
 *  Gets an alias.
 *
 *  @param name Required. The name of the alias. Must be of the form
 *    `organizations/{organization}/environments/{environment}/keystores/{keystore}/aliases/{alias}`.
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsKeystoresAliasesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the certificate from an alias in PEM-encoded form.
 *
 *  Method: apigee.organizations.environments.keystores.aliases.getCertificate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsKeystoresAliasesGetCertificate : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsKeystoresAliasesGetCertificateWithname:]

/**
 *  Required. The name of the alias. Must be of the form
 *  `organizations/{organization}/environments/{environment}/keystores/{keystore}/aliases/{alias}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleApiHttpBody.
 *
 *  Gets the certificate from an alias in PEM-encoded form.
 *
 *  @param name Required. The name of the alias. Must be of the form
 *    `organizations/{organization}/environments/{environment}/keystores/{keystore}/aliases/{alias}`.
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsKeystoresAliasesGetCertificate
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Updates the certificate in an alias.
 *
 *  Method: apigee.organizations.environments.keystores.aliases.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsKeystoresAliasesUpdate : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsKeystoresAliasesUpdateWithObject:name:]

/** Required. If `true`, no expiry validation will be performed. */
@property(nonatomic, assign) BOOL ignoreExpiryValidation;

/**
 *  If `true`, do not throw an error when the file contains a chain with no
 *  newline between each certificate. By default, a newline is needed between
 *  each certificate in a chain.
 */
@property(nonatomic, assign) BOOL ignoreNewlineValidation;

/**
 *  Required. The name of the alias. Must be of the form
 *  `organizations/{organization}/environments/{environment}/keystores/{keystore}/aliases/{alias}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1Alias.
 *
 *  Updates the certificate in an alias.
 *
 *  @param object The @c GTLRApigee_GoogleApiHttpBody to include in the query.
 *  @param name Required. The name of the alias. Must be of the form
 *    `organizations/{organization}/environments/{environment}/keystores/{keystore}/aliases/{alias}`.
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsKeystoresAliasesUpdate
 */
+ (instancetype)queryWithObject:(GTLRApigee_GoogleApiHttpBody *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a keystore or truststore:
 *  * Keystore: Contains certificates and their associated keys.
 *  * Truststore: Contains trusted certificates used to validate a
 *  server's certificate. These certificates are typically self-signed
 *  certificates or certificates that are not signed by a trusted CA.
 *
 *  Method: apigee.organizations.environments.keystores.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsKeystoresCreate : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsKeystoresCreateWithObject:parent:]

/** Optional. Overrides the value in Keystore. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. The name of the environment in which to create the keystore.
 *  Must be of the form
 *  `organizations/{organization}/environments/{environment}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1Keystore.
 *
 *  Creates a keystore or truststore:
 *  * Keystore: Contains certificates and their associated keys.
 *  * Truststore: Contains trusted certificates used to validate a
 *  server's certificate. These certificates are typically self-signed
 *  certificates or certificates that are not signed by a trusted CA.
 *
 *  @param object The @c GTLRApigee_GoogleCloudApigeeV1Keystore to include in
 *    the query.
 *  @param parent Required. The name of the environment in which to create the
 *    keystore.
 *    Must be of the form
 *    `organizations/{organization}/environments/{environment}`.
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsKeystoresCreate
 */
+ (instancetype)queryWithObject:(GTLRApigee_GoogleCloudApigeeV1Keystore *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a keystore or truststore.
 *
 *  Method: apigee.organizations.environments.keystores.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsKeystoresDelete : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsKeystoresDeleteWithname:]

/**
 *  Required. The name of keystore to delete. Must be of the form
 *  `organizations/{organization}/environments/{environment}/keystores/{keystore}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1Keystore.
 *
 *  Deletes a keystore or truststore.
 *
 *  @param name Required. The name of keystore to delete. Must be of the form
 *    `organizations/{organization}/environments/{environment}/keystores/{keystore}`.
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsKeystoresDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a keystore or truststore.
 *
 *  Method: apigee.organizations.environments.keystores.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsKeystoresGet : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsKeystoresGetWithname:]

/**
 *  Required. The name of keystore. Must be of the form
 *  `organizations/{organization}/environments/{environment}/keystores/{keystore}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1Keystore.
 *
 *  Gets a keystore or truststore.
 *
 *  @param name Required. The name of keystore. Must be of the form
 *    `organizations/{organization}/environments/{environment}/keystores/{keystore}`.
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsKeystoresGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Creates a key value map in an environment.
 *
 *  Method: apigee.organizations.environments.keyvaluemaps.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsKeyvaluemapsCreate : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsKeyvaluemapsCreateWithObject:parent:]

/**
 *  Required. The name of the environment in which to create the key value map.
 *  Must be of the form
 *  `organizations/{organization}/environments/{environment}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1KeyValueMap.
 *
 *  Creates a key value map in an environment.
 *
 *  @param object The @c GTLRApigee_GoogleCloudApigeeV1KeyValueMap to include in
 *    the query.
 *  @param parent Required. The name of the environment in which to create the
 *    key value map.
 *    Must be of the form
 *    `organizations/{organization}/environments/{environment}`.
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsKeyvaluemapsCreate
 */
+ (instancetype)queryWithObject:(GTLRApigee_GoogleCloudApigeeV1KeyValueMap *)object
                         parent:(NSString *)parent;

@end

/**
 *  Delete a key value map in an environment.
 *
 *  Method: apigee.organizations.environments.keyvaluemaps.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsKeyvaluemapsDelete : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsKeyvaluemapsDeleteWithname:]

/**
 *  Required. The name of the key value map.
 *  Must be of the form
 *  `organizations/{organization}/environments/{environment}/keyvaluemaps/{keyvaluemap}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1KeyValueMap.
 *
 *  Delete a key value map in an environment.
 *
 *  @param name Required. The name of the key value map.
 *    Must be of the form
 *    `organizations/{organization}/environments/{environment}/keyvaluemaps/{keyvaluemap}`.
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsKeyvaluemapsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  This api is similar to GetStats
 *  except that the response is less verbose.
 *  In the current scheme, a query parameter _optimized instructs
 *  Edge Analytics to change the response but since this behavior
 *  is not possible with protocol buffer and since this parameter is
 *  predominantly used by Edge UI, we are introducing a separate api.
 *
 *  Method: apigee.organizations.environments.optimizedStats.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsOptimizedStatsGet : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsOptimizedStatsGetWithname:]

/** Legacy field: not used anymore. */
@property(nonatomic, copy, nullable) NSString *accuracy;

/**
 *  If customers want to query custom aggregate tables, then this parameter
 *  can be used to specify the table name. If this parameter is skipped, then
 *  Edge Query will try to retrieve the data from fact tables which will be
 *  expensive.
 */
@property(nonatomic, copy, nullable) NSString *aggTable;

/** Enables drill-down on specific dimension values. */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  This parameter is used to limit the number of result items.
 *  Default and the max value is 14400.
 */
@property(nonatomic, copy, nullable) NSString *limit;

/**
 *  Required. The resource name for which the interactive query will be
 *  executed.
 *  Must be of the form
 *  `organizations/{organization_id}/environments/{environment_id/stats/{dimensions}`
 *  Dimensions let you view metrics in meaningful groupings. E.g. apiproxy,
 *  target_host. The value of dimensions should be comma separated list as
 *  shown below
 *  `organizations/{org}/environments/{env}/stats/apiproxy,request_verb`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Use offset with limit to enable pagination of results. For example,
 *  to display results 11-20, set limit to '10' and offset to '10'.
 */
@property(nonatomic, copy, nullable) NSString *offset;

/** Legacy field: not used anymore. */
@property(nonatomic, assign) BOOL realtime;

/**
 *  Required. The select parameter contains a comma separated list of metrics.
 *  E.g. sum(message_count),sum(error_count)
 */
@property(nonatomic, copy, nullable) NSString *select;

/**
 *  This parameter routes the query to api monitoring service for last hour.
 */
@property(nonatomic, assign) BOOL sonar;

/**
 *  This parameter specifies if the sort order should be ascending or
 *  descending Supported values are DESC and ASC.
 */
@property(nonatomic, copy, nullable) NSString *sort;

/** Comma separated list of columns to sort the final result. */
@property(nonatomic, copy, nullable) NSString *sortby;

/**
 *  Required. Time interval for the interactive query.
 *  Time range is specified as start~end E.g. 04/15/2017 00:00~05/15/2017 23:59
 */
@property(nonatomic, copy, nullable) NSString *timeRange;

/**
 *  A value of second, minute, hour, day, week, month.
 *  Time Unit specifies the granularity of metrics returned.
 */
@property(nonatomic, copy, nullable) NSString *timeUnit;

/**
 *  Take 'top k' results from results, for example, to return the top 5
 *  results 'topk=5'.
 */
@property(nonatomic, copy, nullable) NSString *topk;

/**
 *  Lists timestamps in ascending order if set to true. Recommend setting
 *  this value to true if you are using sortby with sort=DESC.
 */
@property(nonatomic, assign) BOOL tsAscending;

/** This parameters contains the timezone offset value. */
@property(nonatomic, copy, nullable) NSString *tzo;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1OptimizedStats.
 *
 *  This api is similar to GetStats
 *  except that the response is less verbose.
 *  In the current scheme, a query parameter _optimized instructs
 *  Edge Analytics to change the response but since this behavior
 *  is not possible with protocol buffer and since this parameter is
 *  predominantly used by Edge UI, we are introducing a separate api.
 *
 *  @param name Required. The resource name for which the interactive query will
 *    be executed.
 *    Must be of the form
 *    `organizations/{organization_id}/environments/{environment_id/stats/{dimensions}`
 *    Dimensions let you view metrics in meaningful groupings. E.g. apiproxy,
 *    target_host. The value of dimensions should be comma separated list as
 *    shown below
 *    `organizations/{org}/environments/{env}/stats/apiproxy,request_verb`
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsOptimizedStatsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Submit a query to be processed in the background.
 *  If the submission of the query succeeds, the API returns a 201 status and
 *  an ID that refer to the query. In addition to the HTTP status 201, the
 *  `state` of "enqueued" means that the request succeeded.
 *
 *  Method: apigee.organizations.environments.queries.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsQueriesCreate : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsQueriesCreateWithObject:parent:]

/**
 *  Required. The parent resource name.
 *  Must be of the form `organizations/{org}/environments/{env}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1AsyncQuery.
 *
 *  Submit a query to be processed in the background.
 *  If the submission of the query succeeds, the API returns a 201 status and
 *  an ID that refer to the query. In addition to the HTTP status 201, the
 *  `state` of "enqueued" means that the request succeeded.
 *
 *  @param object The @c GTLRApigee_GoogleCloudApigeeV1Query to include in the
 *    query.
 *  @param parent Required. The parent resource name.
 *    Must be of the form `organizations/{org}/environments/{env}`.
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsQueriesCreate
 */
+ (instancetype)queryWithObject:(GTLRApigee_GoogleCloudApigeeV1Query *)object
                         parent:(NSString *)parent;

@end

/**
 *  Get query status
 *  If the query is still in progress, the `state` is set to "running"
 *  After the query has completed successfully, `state` is set to "completed"
 *
 *  Method: apigee.organizations.environments.queries.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsQueriesGet : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsQueriesGetWithname:]

/**
 *  Required. Name of the asynchronous query to get. Must be of the form
 *  `organizations/{org}/environments/{env}/queries/{queryId}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1AsyncQuery.
 *
 *  Get query status
 *  If the query is still in progress, the `state` is set to "running"
 *  After the query has completed successfully, `state` is set to "completed"
 *
 *  @param name Required. Name of the asynchronous query to get. Must be of the
 *    form
 *    `organizations/{org}/environments/{env}/queries/{queryId}`.
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsQueriesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  After the query is completed, use this API to retrieve the results.
 *  If the request succeeds, and there is a non-zero result set, the result is
 *  downloaded to the client as a zipped JSON file.
 *  The name of the downloaded file will be:
 *  OfflineQueryResult-<query-id>.zip
 *  Example: `OfflineQueryResult-9cfc0d85-0f30-46d6-ae6f-318d0cb961bd.zip`
 *
 *  Method: apigee.organizations.environments.queries.getResult
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsQueriesGetResult : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsQueriesGetResultWithname:]

/**
 *  Required. Name of the asynchronous query result to get. Must be of the
 *  form `organizations/{org}/environments/{env}/queries/{queryId}/result`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleApiHttpBody.
 *
 *  After the query is completed, use this API to retrieve the results.
 *  If the request succeeds, and there is a non-zero result set, the result is
 *  downloaded to the client as a zipped JSON file.
 *  The name of the downloaded file will be:
 *  OfflineQueryResult-<query-id>.zip
 *  Example: `OfflineQueryResult-9cfc0d85-0f30-46d6-ae6f-318d0cb961bd.zip`
 *
 *  @param name Required. Name of the asynchronous query result to get. Must be
 *    of the
 *    form `organizations/{org}/environments/{env}/queries/{queryId}/result`.
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsQueriesGetResult
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Return a list of Asynchronous Queries
 *
 *  Method: apigee.organizations.environments.queries.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsQueriesList : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsQueriesListWithparent:]

/**
 *  Filter response list by dataset.
 *  Example: `api`, `mint`
 */
@property(nonatomic, copy, nullable) NSString *dataset;

/**
 *  Filter response list by returning asynchronous queries that
 *  created after this date time.
 *  Time must be in ISO date-time format like '2011-12-03T10:15:30Z'.
 */
@property(nonatomic, copy, nullable) NSString *from;

/**
 *  Flag to include asynchronous queries that don't have a report denifition.
 */
@property(nonatomic, copy, nullable) NSString *inclQueriesWithoutReport;

/**
 *  Required. The parent resource name.
 *  Must be of the form `organizations/{org}/environments/{env}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/** Filter response list by asynchronous query status. */
@property(nonatomic, copy, nullable) NSString *status;

/** Filter response list by user who submitted queries. */
@property(nonatomic, copy, nullable) NSString *submittedBy;

/**
 *  Filter response list by returning asynchronous queries that
 *  created before this date time.
 *  Time must be in ISO date-time format like '2011-12-03T10:16:30Z'.
 */
@property(nonatomic, copy, nullable) NSString *to;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1ListAsyncQueriesResponse.
 *
 *  Return a list of Asynchronous Queries
 *
 *  @param parent Required. The parent resource name.
 *    Must be of the form `organizations/{org}/environments/{env}`.
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsQueriesList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Creates a Reference in the specified environment.
 *
 *  Method: apigee.organizations.environments.references.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsReferencesCreate : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsReferencesCreateWithObject:parent:]

/**
 *  Required. The parent environment name under which the Reference will
 *  be created. Must be of the form `organizations/{org}/environments/{env}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1Reference.
 *
 *  Creates a Reference in the specified environment.
 *
 *  @param object The @c GTLRApigee_GoogleCloudApigeeV1Reference to include in
 *    the query.
 *  @param parent Required. The parent environment name under which the
 *    Reference will
 *    be created. Must be of the form `organizations/{org}/environments/{env}`.
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsReferencesCreate
 */
+ (instancetype)queryWithObject:(GTLRApigee_GoogleCloudApigeeV1Reference *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a Reference from an environment. Returns the deleted
 *  Reference resource.
 *
 *  Method: apigee.organizations.environments.references.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsReferencesDelete : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsReferencesDeleteWithname:]

/**
 *  Required. The name of the Reference to delete. Must be
 *  of the form `organizations/{org}/environments/{env}/references/{ref}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1Reference.
 *
 *  Deletes a Reference from an environment. Returns the deleted
 *  Reference resource.
 *
 *  @param name Required. The name of the Reference to delete. Must be
 *    of the form `organizations/{org}/environments/{env}/references/{ref}`.
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsReferencesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a Reference resource.
 *
 *  Method: apigee.organizations.environments.references.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsReferencesGet : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsReferencesGetWithname:]

/**
 *  Required. The name of the Reference to get. Must be of the form
 *  `organizations/{org}/environments/{env}/references/{ref}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1Reference.
 *
 *  Gets a Reference resource.
 *
 *  @param name Required. The name of the Reference to get. Must be of the form
 *    `organizations/{org}/environments/{env}/references/{ref}`.
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsReferencesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Updates an existing Reference. Note that this operation has PUT
 *  semantics; it will replace the entirety of the existing Reference with
 *  the resource in the request body.
 *
 *  Method: apigee.organizations.environments.references.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsReferencesUpdate : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsReferencesUpdateWithObject:name:]

/**
 *  Required. The name of the Reference to update. Must be of the form
 *  `organizations/{org}/environments/{env}/references/{ref}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1Reference.
 *
 *  Updates an existing Reference. Note that this operation has PUT
 *  semantics; it will replace the entirety of the existing Reference with
 *  the resource in the request body.
 *
 *  @param object The @c GTLRApigee_GoogleCloudApigeeV1Reference to include in
 *    the query.
 *  @param name Required. The name of the Reference to update. Must be of the
 *    form
 *    `organizations/{org}/environments/{env}/references/{ref}`.
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsReferencesUpdate
 */
+ (instancetype)queryWithObject:(GTLRApigee_GoogleCloudApigeeV1Reference *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a resource file.
 *  Specify the `Content-Type` as `application/octet-stream` or
 *  `multipart/form-data`.
 *  For more information about resource files, see
 *  [Resource files](/api-platform/develop/resource-files).
 *
 *  Method: apigee.organizations.environments.resourcefiles.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsResourcefilesCreate : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsResourcefilesCreateWithObject:parent:]

/**
 *  Required. Name of the resource file. Must match the regular expression:
 *  <var>[a-zA-Z0-9:/\\\\!\@#$%^&{}\\[\\]()+\\-=,.~'` ]{1,255}</var>
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. Name of the environment in which to create the resource file in
 *  the
 *  following format:
 *  `organizations/{org}/environments/{env}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/** Required. Resource file type. {{ resource_file_type }} */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1ResourceFile.
 *
 *  Creates a resource file.
 *  Specify the `Content-Type` as `application/octet-stream` or
 *  `multipart/form-data`.
 *  For more information about resource files, see
 *  [Resource files](/api-platform/develop/resource-files).
 *
 *  @param object The @c GTLRApigee_GoogleApiHttpBody to include in the query.
 *  @param parent Required. Name of the environment in which to create the
 *    resource file in the
 *    following format:
 *    `organizations/{org}/environments/{env}`.
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsResourcefilesCreate
 */
+ (instancetype)queryWithObject:(GTLRApigee_GoogleApiHttpBody *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a resource file.
 *  For more information about resource files, see
 *  [Resource files](/api-platform/develop/resource-files).
 *
 *  Method: apigee.organizations.environments.resourcefiles.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsResourcefilesDelete : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsResourcefilesDeleteWithparent:type:name:]

/**
 *  Required. ID of the resource file to delete. Must match the regular
 *  expression: <var>[a-zA-Z0-9:/\\\\!\@#$%^&{}\\[\\]()+\\-=,.~'` ]{1,255}</var>
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. Name of the environment in the following format:
 *  `organizations/{org}/environments/{env}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/** Required. Resource file type. {{ resource_file_type }} */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1ResourceFile.
 *
 *  Deletes a resource file.
 *  For more information about resource files, see
 *  [Resource files](/api-platform/develop/resource-files).
 *
 *  @param parent Required. Name of the environment in the following format:
 *    `organizations/{org}/environments/{env}`.
 *  @param type Required. Resource file type. {{ resource_file_type }}
 *  @param name Required. ID of the resource file to delete. Must match the
 *    regular
 *    expression: <var>[a-zA-Z0-9:/\\\\!\@#$%^&{}\\[\\]()+\\-=,.~'`
 *    ]{1,255}</var>
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsResourcefilesDelete
 */
+ (instancetype)queryWithParent:(NSString *)parent
                           type:(NSString *)type
                           name:(NSString *)name;

@end

/**
 *  Gets the contents of a resource file.
 *  For more information about resource files, see
 *  [Resource files](/api-platform/develop/resource-files).
 *
 *  Method: apigee.organizations.environments.resourcefiles.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsResourcefilesGet : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsResourcefilesGetWithparent:type:name:]

/**
 *  Required. ID of the resource file. Must match the regular
 *  expression: <var>[a-zA-Z0-9:/\\\\!\@#$%^&{}\\[\\]()+\\-=,.~'` ]{1,255}</var>
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. Name of the environment in the following format:
 *  `organizations/{org}/environments/{env}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/** Required. Resource file type. {{ resource_file_type }} */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  Fetches a @c GTLRApigee_GoogleApiHttpBody.
 *
 *  Gets the contents of a resource file.
 *  For more information about resource files, see
 *  [Resource files](/api-platform/develop/resource-files).
 *
 *  @param parent Required. Name of the environment in the following format:
 *    `organizations/{org}/environments/{env}`.
 *  @param type Required. Resource file type. {{ resource_file_type }}
 *  @param name Required. ID of the resource file. Must match the regular
 *    expression: <var>[a-zA-Z0-9:/\\\\!\@#$%^&{}\\[\\]()+\\-=,.~'`
 *    ]{1,255}</var>
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsResourcefilesGet
 */
+ (instancetype)queryWithParent:(NSString *)parent
                           type:(NSString *)type
                           name:(NSString *)name;

@end

/**
 *  Lists all resource files.
 *  For more information about resource files, see
 *  [Resource files](/api-platform/develop/resource-files).
 *
 *  Method: apigee.organizations.environments.resourcefiles.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsResourcefilesList : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsResourcefilesListWithparent:]

/**
 *  Required. Name of the environment in which to list resource files in the
 *  following
 *  format:
 *  `organizations/{org}/environments/{env}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Optional. Type of resource files to list.
 *  {{ resource_file_type }}
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1ListEnvironmentResourcesResponse.
 *
 *  Lists all resource files.
 *  For more information about resource files, see
 *  [Resource files](/api-platform/develop/resource-files).
 *
 *  @param parent Required. Name of the environment in which to list resource
 *    files in the following
 *    format:
 *    `organizations/{org}/environments/{env}`.
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsResourcefilesList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Lists all resource files.
 *  For more information about resource files, see
 *  [Resource files](/api-platform/develop/resource-files).
 *
 *  Method: apigee.organizations.environments.resourcefiles.listEnvironmentResources
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsResourcefilesListEnvironmentResources : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsResourcefilesListEnvironmentResourcesWithparent:type:]

/**
 *  Required. Name of the environment in which to list resource files in the
 *  following
 *  format:
 *  `organizations/{org}/environments/{env}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Optional. Type of resource files to list.
 *  {{ resource_file_type }}
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1ListEnvironmentResourcesResponse.
 *
 *  Lists all resource files.
 *  For more information about resource files, see
 *  [Resource files](/api-platform/develop/resource-files).
 *
 *  @param parent Required. Name of the environment in which to list resource
 *    files in the following
 *    format:
 *    `organizations/{org}/environments/{env}`.
 *  @param type Optional. Type of resource files to list.
 *    {{ resource_file_type }}
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsResourcefilesListEnvironmentResources
 */
+ (instancetype)queryWithParent:(NSString *)parent
                           type:(NSString *)type;

@end

/**
 *  Updates a resource file.
 *  Specify the `Content-Type` as `application/octet-stream` or
 *  `multipart/form-data`.
 *  For more information about resource files, see
 *  [Resource files](/api-platform/develop/resource-files).
 *
 *  Method: apigee.organizations.environments.resourcefiles.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsResourcefilesUpdate : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsResourcefilesUpdateWithObject:parent:type:name:]

/**
 *  Required. ID of the resource file to update. Must match the regular
 *  expression: <var>[a-zA-Z0-9:/\\\\!\@#$%^&{}\\[\\]()+\\-=,.~'` ]{1,255}</var>
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. Name of the environment in the following format:
 *  `organizations/{org}/environments/{env}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/** Required. Resource file type. {{ resource_file_type }} */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1ResourceFile.
 *
 *  Updates a resource file.
 *  Specify the `Content-Type` as `application/octet-stream` or
 *  `multipart/form-data`.
 *  For more information about resource files, see
 *  [Resource files](/api-platform/develop/resource-files).
 *
 *  @param object The @c GTLRApigee_GoogleApiHttpBody to include in the query.
 *  @param parent Required. Name of the environment in the following format:
 *    `organizations/{org}/environments/{env}`.
 *  @param type Required. Resource file type. {{ resource_file_type }}
 *  @param name Required. ID of the resource file to update. Must match the
 *    regular
 *    expression: <var>[a-zA-Z0-9:/\\\\!\@#$%^&{}\\[\\]()+\\-=,.~'`
 *    ]{1,255}</var>
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsResourcefilesUpdate
 */
+ (instancetype)queryWithObject:(GTLRApigee_GoogleApiHttpBody *)object
                         parent:(NSString *)parent
                           type:(NSString *)type
                           name:(NSString *)name;

@end

/**
 *  Sets the IAM policy on an environment, if the policy already
 *  exists it will be replaced. For more information, see
 *  [Manage users, roles, and permissions
 *  using the API](https://docs.apigee.com/hybrid/latest/manage-users-roles).
 *  You must have the `apigee.environments.setIamPolicy` permission to
 *  call this API.
 *
 *  Method: apigee.organizations.environments.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsSetIamPolicy : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsSetIamPolicyWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy is being specified.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRApigee_GoogleIamV1Policy.
 *
 *  Sets the IAM policy on an environment, if the policy already
 *  exists it will be replaced. For more information, see
 *  [Manage users, roles, and permissions
 *  using the API](https://docs.apigee.com/hybrid/latest/manage-users-roles).
 *  You must have the `apigee.environments.setIamPolicy` permission to
 *  call this API.
 *
 *  @param object The @c GTLRApigee_GoogleIamV1SetIamPolicyRequest to include in
 *    the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRApigee_GoogleIamV1SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Lists all deployments of a shared flow in an environment.
 *
 *  Method: apigee.organizations.environments.sharedflows.deployments.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsSharedflowsDeploymentsList : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsSharedflowsDeploymentsListWithparent:]

/**
 *  Required. Name representing a shared flow in an environment in the following
 *  format:
 *  `organizations/{org}/environments/{env}/sharedflows/{sharedflow}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1ListDeploymentsResponse.
 *
 *  Lists all deployments of a shared flow in an environment.
 *
 *  @param parent Required. Name representing a shared flow in an environment in
 *    the following
 *    format:
 *    `organizations/{org}/environments/{env}/sharedflows/{sharedflow}`
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsSharedflowsDeploymentsList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Undeploys a shared flow revision from an environment.
 *
 *  Method: apigee.organizations.environments.sharedflows.revisions.deployments
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsSharedflowsRevisionsDeployments : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsSharedflowsRevisionsDeploymentsWithname:]

/**
 *  Required. Name of the shared flow revision to undeploy in the following
 *  format:
 *  `organizations/{org}/environments/{env}/sharedflows/{sharedflow}/revisions/{rev}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleProtobufEmpty.
 *
 *  Undeploys a shared flow revision from an environment.
 *
 *  @param name Required. Name of the shared flow revision to undeploy in the
 *    following format:
 *    `organizations/{org}/environments/{env}/sharedflows/{sharedflow}/revisions/{rev}`
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsSharedflowsRevisionsDeployments
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the deployment of a shared flow revision and actual state reported by
 *  runtime pods.
 *
 *  Method: apigee.organizations.environments.sharedflows.revisions.getDeployments
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsSharedflowsRevisionsGetDeployments : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsSharedflowsRevisionsGetDeploymentsWithname:]

/**
 *  Required. Name representing a shared flow in an environment in the following
 *  format:
 *  `organizations/{org}/environments/{env}/sharedflows/{sharedflow}/revisions/{rev}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1Deployment.
 *
 *  Gets the deployment of a shared flow revision and actual state reported by
 *  runtime pods.
 *
 *  @param name Required. Name representing a shared flow in an environment in
 *    the following
 *    format:
 *    `organizations/{org}/environments/{env}/sharedflows/{sharedflow}/revisions/{rev}`
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsSharedflowsRevisionsGetDeployments
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Retrieve metrics grouped by dimensions.
 *  The types of metrics you can retrieve include traffic, message counts,
 *  API call latency, response size, and cache hits and counts.
 *  Dimensions let you view metrics in meaningful groups.
 *  The stats api does accept dimensions as path params. The dimensions are
 *  optional in which case the metrics are computed on the entire data
 *  for the given timerange.
 *
 *  Method: apigee.organizations.environments.stats.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsStatsGet : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsStatsGetWithname:]

/**
 *  Legacy field: not used anymore.
 *  This field is present to support UI calls which still use this parameter.
 */
@property(nonatomic, copy, nullable) NSString *accuracy;

/**
 *  If customers want to query custom aggregate tables, then this parameter
 *  can be used to specify the table name. If this parameter is skipped, then
 *  Edge Query will try to retrieve the data from fact tables which will be
 *  expensive.
 */
@property(nonatomic, copy, nullable) NSString *aggTable;

/** Enables drill-down on specific dimension values */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  This parameter is used to limit the number of result items.
 *  Default and the max value is 14400.
 */
@property(nonatomic, copy, nullable) NSString *limit;

/**
 *  Required. The resource name for which the interactive query will be
 *  executed.
 *  Must be of the form
 *  `organizations/{organization_id}/environments/{environment_id/stats/{dimensions}`
 *  Dimensions let you view metrics in meaningful groupings. E.g. apiproxy,
 *  target_host. The value of dimensions should be comma separated list as
 *  shown below
 *  `organizations/{org}/environments/{env}/stats/apiproxy,request_verb`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Use offset with limit to enable pagination of results. For example,
 *  to display results 11-20, set limit to '10' and offset to '10'.
 */
@property(nonatomic, copy, nullable) NSString *offset;

/** Legacy field: not used anymore. */
@property(nonatomic, assign) BOOL realtime;

/**
 *  The select parameter contains a comma separated list of metrics.
 *  E.g. sum(message_count),sum(error_count)
 */
@property(nonatomic, copy, nullable) NSString *select;

/**
 *  This parameter routes the query to api monitoring service for last hour.
 */
@property(nonatomic, assign) BOOL sonar;

/**
 *  This parameter specifies if the sort order should be ascending or
 *  descending Supported values are DESC and ASC.
 */
@property(nonatomic, copy, nullable) NSString *sort;

/** Comma separated list of columns to sort the final result. */
@property(nonatomic, copy, nullable) NSString *sortby;

/**
 *  Time interval for the interactive query.
 *  Time range is specified as start~end E.g. 04/15/2017 00:00~05/15/2017 23:59
 */
@property(nonatomic, copy, nullable) NSString *timeRange;

/**
 *  A value of second, minute, hour, day, week, month.
 *  Time Unit specifies the granularity of metrics returned.
 */
@property(nonatomic, copy, nullable) NSString *timeUnit;

/**
 *  Take 'top k' results from results, for example, to return the top 5
 *  results 'topk=5'.
 */
@property(nonatomic, copy, nullable) NSString *topk;

/**
 *  Lists timestamps in ascending order if set to true. Recommend setting
 *  this value to true if you are using sortby with sort=DESC.
 */
@property(nonatomic, assign) BOOL tsAscending;

/** This parameters contains the timezone offset value. */
@property(nonatomic, copy, nullable) NSString *tzo;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1Stats.
 *
 *  Retrieve metrics grouped by dimensions.
 *  The types of metrics you can retrieve include traffic, message counts,
 *  API call latency, response size, and cache hits and counts.
 *  Dimensions let you view metrics in meaningful groups.
 *  The stats api does accept dimensions as path params. The dimensions are
 *  optional in which case the metrics are computed on the entire data
 *  for the given timerange.
 *
 *  @param name Required. The resource name for which the interactive query will
 *    be executed.
 *    Must be of the form
 *    `organizations/{organization_id}/environments/{environment_id/stats/{dimensions}`
 *    Dimensions let you view metrics in meaningful groupings. E.g. apiproxy,
 *    target_host. The value of dimensions should be comma separated list as
 *    shown below
 *    `organizations/{org}/environments/{env}/stats/apiproxy,request_verb`
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsStatsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Creates a subscription for the environment's Pub/Sub topic.
 *  The server will assign a random name for this subscription.
 *  The "name" and "push_config" must *not* be specified.
 *
 *  Method: apigee.organizations.environments.subscribe
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsSubscribe : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsSubscribeWithparent:]

/**
 *  Required. Name of the environment. Use the following structure in your
 *  request:
 *  `organizations/{org}/environments/{env}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1Subscription.
 *
 *  Creates a subscription for the environment's Pub/Sub topic.
 *  The server will assign a random name for this subscription.
 *  The "name" and "push_config" must *not* be specified.
 *
 *  @param parent Required. Name of the environment. Use the following structure
 *    in your request:
 *    `organizations/{org}/environments/{env}`
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsSubscribe
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Creates a TargetServer in the specified environment.
 *
 *  Method: apigee.organizations.environments.targetservers.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsTargetserversCreate : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsTargetserversCreateWithObject:parent:]

/**
 *  Optional. The ID to give the TargetServer. This will overwrite the
 *  value in TargetServer.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. The parent environment name under which the TargetServer will
 *  be created. Must be of the form `organizations/{org}/environments/{env}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1TargetServer.
 *
 *  Creates a TargetServer in the specified environment.
 *
 *  @param object The @c GTLRApigee_GoogleCloudApigeeV1TargetServer to include
 *    in the query.
 *  @param parent Required. The parent environment name under which the
 *    TargetServer will
 *    be created. Must be of the form `organizations/{org}/environments/{env}`.
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsTargetserversCreate
 */
+ (instancetype)queryWithObject:(GTLRApigee_GoogleCloudApigeeV1TargetServer *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a TargetServer from an environment. Returns the deleted
 *  TargetServer resource.
 *
 *  Method: apigee.organizations.environments.targetservers.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsTargetserversDelete : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsTargetserversDeleteWithname:]

/**
 *  Required. The name of the TargetServer to delete. Must be
 *  of the form
 *  `organizations/{org}/environments/{env}/targetservers/{target_server_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1TargetServer.
 *
 *  Deletes a TargetServer from an environment. Returns the deleted
 *  TargetServer resource.
 *
 *  @param name Required. The name of the TargetServer to delete. Must be
 *    of the form
 *    `organizations/{org}/environments/{env}/targetservers/{target_server_id}`.
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsTargetserversDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a TargetServer resource.
 *
 *  Method: apigee.organizations.environments.targetservers.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsTargetserversGet : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsTargetserversGetWithname:]

/**
 *  Required. The name of the TargetServer to get. Must be of the form
 *  `organizations/{org}/environments/{env}/targetservers/{target_server_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1TargetServer.
 *
 *  Gets a TargetServer resource.
 *
 *  @param name Required. The name of the TargetServer to get. Must be of the
 *    form
 *    `organizations/{org}/environments/{env}/targetservers/{target_server_id}`.
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsTargetserversGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Updates an existing TargetServer. Note that this operation has PUT
 *  semantics; it will replace the entirety of the existing TargetServer with
 *  the resource in the request body.
 *
 *  Method: apigee.organizations.environments.targetservers.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsTargetserversUpdate : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsTargetserversUpdateWithObject:name:]

/**
 *  Required. The name of the TargetServer to replace. Must be of the form
 *  `organizations/{org}/environments/{env}/targetservers/{target_server_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1TargetServer.
 *
 *  Updates an existing TargetServer. Note that this operation has PUT
 *  semantics; it will replace the entirety of the existing TargetServer with
 *  the resource in the request body.
 *
 *  @param object The @c GTLRApigee_GoogleCloudApigeeV1TargetServer to include
 *    in the query.
 *  @param name Required. The name of the TargetServer to replace. Must be of
 *    the form
 *    `organizations/{org}/environments/{env}/targetservers/{target_server_id}`.
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsTargetserversUpdate
 */
+ (instancetype)queryWithObject:(GTLRApigee_GoogleCloudApigeeV1TargetServer *)object
                           name:(NSString *)name;

@end

/**
 *  Tests the permissions of a user on an environment,
 *  and returns a subset of permissions that the user has on the environment.
 *  If the environment does not exist, an empty permission set is returned
 *  (a NOT_FOUND error is not returned).
 *
 *  Method: apigee.organizations.environments.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsTestIamPermissions : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsTestIamPermissionsWithObject:resource:]

/**
 *  REQUIRED: The resource for which the policy detail is being requested.
 *  See the operation documentation for the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRApigee_GoogleIamV1TestIamPermissionsResponse.
 *
 *  Tests the permissions of a user on an environment,
 *  and returns a subset of permissions that the user has on the environment.
 *  If the environment does not exist, an empty permission set is returned
 *  (a NOT_FOUND error is not returned).
 *
 *  @param object The @c GTLRApigee_GoogleIamV1TestIamPermissionsRequest to
 *    include in the query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested.
 *    See the operation documentation for the appropriate value for this field.
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRApigee_GoogleIamV1TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Deletes a subscription for the environment's Pub/Sub topic.
 *
 *  Method: apigee.organizations.environments.unsubscribe
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsUnsubscribe : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsUnsubscribeWithObject:parent:]

/**
 *  Required. Name of the environment. Use the following structure in your
 *  request:
 *  `organizations/{org}/environments/{env}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRApigee_GoogleProtobufEmpty.
 *
 *  Deletes a subscription for the environment's Pub/Sub topic.
 *
 *  @param object The @c GTLRApigee_GoogleCloudApigeeV1Subscription to include
 *    in the query.
 *  @param parent Required. Name of the environment. Use the following structure
 *    in your request:
 *    `organizations/{org}/environments/{env}`
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsUnsubscribe
 */
+ (instancetype)queryWithObject:(GTLRApigee_GoogleCloudApigeeV1Subscription *)object
                         parent:(NSString *)parent;

@end

/**
 *  Updates an existing environment.
 *  When updating properties, you must pass all existing properties to the API,
 *  even if they are not being changed. If you omit properties from the
 *  payload, the properties are removed. To get the current list of
 *  properties for the environment, use the [Get Environment API](get).
 *
 *  Method: apigee.organizations.environments.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsUpdate : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsUpdateWithObject:name:]

/**
 *  Required. Name of the environment. Use the following structure in your
 *  request:
 *  `organizations/{org}/environments/{env}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1Environment.
 *
 *  Updates an existing environment.
 *  When updating properties, you must pass all existing properties to the API,
 *  even if they are not being changed. If you omit properties from the
 *  payload, the properties are removed. To get the current list of
 *  properties for the environment, use the [Get Environment API](get).
 *
 *  @param object The @c GTLRApigee_GoogleCloudApigeeV1Environment to include in
 *    the query.
 *  @param name Required. Name of the environment. Use the following structure
 *    in your request:
 *    `organizations/{org}/environments/{env}`
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsUpdate
 */
+ (instancetype)queryWithObject:(GTLRApigee_GoogleCloudApigeeV1Environment *)object
                           name:(NSString *)name;

@end

/**
 *  Updates the debug mask singleton resource for an environment.
 *
 *  Method: apigee.organizations.environments.updateDebugmask
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsUpdateDebugmask : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsUpdateDebugmaskWithObject:name:]

/** Name of the debug mask. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Boolean flag that specifies whether to replace existing values in the debug
 *  mask when doing an update. Set to true to replace existing values.
 *  The default behavior is to append the values (false).
 */
@property(nonatomic, assign) BOOL replaceRepeatedFields;

/**
 *  Field debug mask to support partial updates.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1DebugMask.
 *
 *  Updates the debug mask singleton resource for an environment.
 *
 *  @param object The @c GTLRApigee_GoogleCloudApigeeV1DebugMask to include in
 *    the query.
 *  @param name Name of the debug mask.
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsUpdateDebugmask
 */
+ (instancetype)queryWithObject:(GTLRApigee_GoogleCloudApigeeV1DebugMask *)object
                           name:(NSString *)name;

@end

/**
 *  Updates an existing environment.
 *  When updating properties, you must pass all existing properties to the API,
 *  even if they are not being changed. If you omit properties from the
 *  payload, the properties are removed. To get the current list of
 *  properties for the environment, use the [Get Environment API](get).
 *
 *  Method: apigee.organizations.environments.updateEnvironment
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsEnvironmentsUpdateEnvironment : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsEnvironmentsUpdateEnvironmentWithObject:name:]

/**
 *  Required. Name of the environment. Use the following structure in your
 *  request:
 *  `organizations/{org}/environments/{env}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1Environment.
 *
 *  Updates an existing environment.
 *  When updating properties, you must pass all existing properties to the API,
 *  even if they are not being changed. If you omit properties from the
 *  payload, the properties are removed. To get the current list of
 *  properties for the environment, use the [Get Environment API](get).
 *
 *  @param object The @c GTLRApigee_GoogleCloudApigeeV1Environment to include in
 *    the query.
 *  @param name Required. Name of the environment. Use the following structure
 *    in your request:
 *    `organizations/{org}/environments/{env}`
 *
 *  @return GTLRApigeeQuery_OrganizationsEnvironmentsUpdateEnvironment
 */
+ (instancetype)queryWithObject:(GTLRApigee_GoogleCloudApigeeV1Environment *)object
                           name:(NSString *)name;

@end

/**
 *  Gets the profile for an Apigee organization.
 *  See
 *  [Organizations](https://docs.apigee.com/hybrid/latest/terminology#organizations).
 *
 *  Method: apigee.organizations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsGet : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsGetWithname:]

/**
 *  Required. Apigee organization name in the following format:
 *  `organizations/{org}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1Organization.
 *
 *  Gets the profile for an Apigee organization.
 *  See
 *  [Organizations](https://docs.apigee.com/hybrid/latest/terminology#organizations).
 *
 *  @param name Required. Apigee organization name in the following format:
 *    `organizations/{org}`
 *
 *  @return GTLRApigeeQuery_OrganizationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the deployed ingress configuration for an organization.
 *
 *  Method: apigee.organizations.getDeployedIngressConfig
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsGetDeployedIngressConfig : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsGetDeployedIngressConfigWithname:]

/**
 *  Required. Name of the deployed configuration for the organization in the
 *  following
 *  format: 'organizations/{org}/deployedIngressConfig'.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1IngressConfig.
 *
 *  Gets the deployed ingress configuration for an organization.
 *
 *  @param name Required. Name of the deployed configuration for the
 *    organization in the following
 *    format: 'organizations/{org}/deployedIngressConfig'.
 *
 *  @return GTLRApigeeQuery_OrganizationsGetDeployedIngressConfig
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists the service accounts with the permissions required to allow
 *  the Synchronizer to download environment data from the control plane.
 *  An ETag is returned in the response to `getSyncAuthorization`.
 *  Pass that ETag when calling [setSyncAuthorization](setSyncAuthorization)
 *  to ensure that you are updating the correct version. If you don't pass the
 *  ETag in the call to `setSyncAuthorization`, then the existing authorization
 *  is overwritten indiscriminately.
 *  For more information, see
 *  [Enable Synchronizer
 *  access](https://docs.apigee.com/hybrid/latest/synchronizer-access#enable-synchronizer-access).
 *  **Note**: Available to Apigee hybrid only.
 *
 *  Method: apigee.organizations.getSyncAuthorization
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsGetSyncAuthorization : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsGetSyncAuthorizationWithObject:name:]

/**
 *  Required. Name of the Apigee organization. Use the following structure in
 *  your
 *  request:
 *  `organizations/{org}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1SyncAuthorization.
 *
 *  Lists the service accounts with the permissions required to allow
 *  the Synchronizer to download environment data from the control plane.
 *  An ETag is returned in the response to `getSyncAuthorization`.
 *  Pass that ETag when calling [setSyncAuthorization](setSyncAuthorization)
 *  to ensure that you are updating the correct version. If you don't pass the
 *  ETag in the call to `setSyncAuthorization`, then the existing authorization
 *  is overwritten indiscriminately.
 *  For more information, see
 *  [Enable Synchronizer
 *  access](https://docs.apigee.com/hybrid/latest/synchronizer-access#enable-synchronizer-access).
 *  **Note**: Available to Apigee hybrid only.
 *
 *  @param object The @c
 *    GTLRApigee_GoogleCloudApigeeV1GetSyncAuthorizationRequest to include in
 *    the query.
 *  @param name Required. Name of the Apigee organization. Use the following
 *    structure in your
 *    request:
 *    `organizations/{org}`
 *
 *  @return GTLRApigeeQuery_OrganizationsGetSyncAuthorization
 */
+ (instancetype)queryWithObject:(GTLRApigee_GoogleCloudApigeeV1GetSyncAuthorizationRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a new attachment of an environment to an instance.
 *  **Note:** Not supported for Apigee hybrid.
 *
 *  Method: apigee.organizations.instances.attachments.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsInstancesAttachmentsCreate : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsInstancesAttachmentsCreateWithObject:parent:]

/**
 *  Required. Name of the instance. Use the following structure in your request:
 *  `organizations/{org}/instances/{instance}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRApigee_GoogleLongrunningOperation.
 *
 *  Creates a new attachment of an environment to an instance.
 *  **Note:** Not supported for Apigee hybrid.
 *
 *  @param object The @c GTLRApigee_GoogleCloudApigeeV1InstanceAttachment to
 *    include in the query.
 *  @param parent Required. Name of the instance. Use the following structure in
 *    your request:
 *    `organizations/{org}/instances/{instance}`.
 *
 *  @return GTLRApigeeQuery_OrganizationsInstancesAttachmentsCreate
 */
+ (instancetype)queryWithObject:(GTLRApigee_GoogleCloudApigeeV1InstanceAttachment *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes an attachment.
 *  **Note:** Not supported for Apigee hybrid.
 *
 *  Method: apigee.organizations.instances.attachments.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsInstancesAttachmentsDelete : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsInstancesAttachmentsDeleteWithname:]

/**
 *  Required. Name of the attachment. Use the following structure in your
 *  request:
 *  `organizations/{org}/instances/{instance}/attachments/{attachment}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleLongrunningOperation.
 *
 *  Deletes an attachment.
 *  **Note:** Not supported for Apigee hybrid.
 *
 *  @param name Required. Name of the attachment. Use the following structure in
 *    your request:
 *    `organizations/{org}/instances/{instance}/attachments/{attachment}`.
 *
 *  @return GTLRApigeeQuery_OrganizationsInstancesAttachmentsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets an attachment.
 *  **Note:** Not supported for Apigee hybrid.
 *
 *  Method: apigee.organizations.instances.attachments.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsInstancesAttachmentsGet : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsInstancesAttachmentsGetWithname:]

/**
 *  Required. Name of the attachment. Use the following structure in your
 *  request:
 *  `organizations/{org}/instances/{instance}/attachments/{attachment}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1InstanceAttachment.
 *
 *  Gets an attachment.
 *  **Note:** Not supported for Apigee hybrid.
 *
 *  @param name Required. Name of the attachment. Use the following structure in
 *    your request:
 *    `organizations/{org}/instances/{instance}/attachments/{attachment}`
 *
 *  @return GTLRApigeeQuery_OrganizationsInstancesAttachmentsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists all attachments to an instance.
 *  **Note:** Not supported for Apigee hybrid.
 *
 *  Method: apigee.organizations.instances.attachments.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsInstancesAttachmentsList : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsInstancesAttachmentsListWithparent:]

/** Maximum number of instance attachments to return. Defaults to 25. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Page token, returned by a previous ListInstanceAttachments call, that you
 *  can use to retrieve the next page of content.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. Name of the organization. Use the following structure in your
 *  request:
 *  `organizations/{org}/instances/{instance}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1ListInstanceAttachmentsResponse.
 *
 *  Lists all attachments to an instance.
 *  **Note:** Not supported for Apigee hybrid.
 *
 *  @param parent Required. Name of the organization. Use the following
 *    structure in your request:
 *    `organizations/{org}/instances/{instance}`
 *
 *  @return GTLRApigeeQuery_OrganizationsInstancesAttachmentsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Creates an Apigee runtime instance. The instance is accessible from the
 *  authorized network configured on the organization.
 *  **Note:** Not supported for Apigee hybrid.
 *
 *  Method: apigee.organizations.instances.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsInstancesCreate : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsInstancesCreateWithObject:parent:]

/**
 *  Required. Name of the organization. Use the following structure in your
 *  request:
 *  `organizations/{org}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRApigee_GoogleLongrunningOperation.
 *
 *  Creates an Apigee runtime instance. The instance is accessible from the
 *  authorized network configured on the organization.
 *  **Note:** Not supported for Apigee hybrid.
 *
 *  @param object The @c GTLRApigee_GoogleCloudApigeeV1Instance to include in
 *    the query.
 *  @param parent Required. Name of the organization. Use the following
 *    structure in your request:
 *    `organizations/{org}`.
 *
 *  @return GTLRApigeeQuery_OrganizationsInstancesCreate
 */
+ (instancetype)queryWithObject:(GTLRApigee_GoogleCloudApigeeV1Instance *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes an Apigee runtime instance. The instance stops serving
 *  requests and the runtime data is deleted.
 *  **Note:** Not supported for Apigee hybrid.
 *
 *  Method: apigee.organizations.instances.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsInstancesDelete : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsInstancesDeleteWithname:]

/**
 *  Required. Name of the instance. Use the following structure in your request:
 *  `organizations/{org}/instance/{instance}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleLongrunningOperation.
 *
 *  Deletes an Apigee runtime instance. The instance stops serving
 *  requests and the runtime data is deleted.
 *  **Note:** Not supported for Apigee hybrid.
 *
 *  @param name Required. Name of the instance. Use the following structure in
 *    your request:
 *    `organizations/{org}/instance/{instance}`.
 *
 *  @return GTLRApigeeQuery_OrganizationsInstancesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the details for an Apigee runtime instance.
 *  **Note:** Not supported for Apigee hybrid.
 *
 *  Method: apigee.organizations.instances.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsInstancesGet : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsInstancesGetWithname:]

/**
 *  Required. Name of the instance. Use the following structure in your request:
 *  `organizations/{org}/instances/{instance}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1Instance.
 *
 *  Gets the details for an Apigee runtime instance.
 *  **Note:** Not supported for Apigee hybrid.
 *
 *  @param name Required. Name of the instance. Use the following structure in
 *    your request:
 *    `organizations/{org}/instances/{instance}`.
 *
 *  @return GTLRApigeeQuery_OrganizationsInstancesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists all Apigee runtime instances for the organization.
 *  **Note:** Not supported for Apigee hybrid.
 *
 *  Method: apigee.organizations.instances.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsInstancesList : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsInstancesListWithparent:]

/** Maximum number of instances to return. Defaults to 25. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Page token, returned from a previous ListInstances call, that you can
 *  use to retrieve the next page of content.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. Name of the organization. Use the following structure in your
 *  request:
 *  `organizations/{org}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1ListInstancesResponse.
 *
 *  Lists all Apigee runtime instances for the organization.
 *  **Note:** Not supported for Apigee hybrid.
 *
 *  @param parent Required. Name of the organization. Use the following
 *    structure in your request:
 *    `organizations/{org}`.
 *
 *  @return GTLRApigeeQuery_OrganizationsInstancesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Reports the latest status for a runtime instance.
 *
 *  Method: apigee.organizations.instances.reportStatus
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsInstancesReportStatus : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsInstancesReportStatusWithObject:instance:]

/**
 *  The name of the instance reporting this status. For SaaS the request
 *  will be rejected if no instance exists under this name.
 *  Format is organizations/{org}/instances/{instance}
 */
@property(nonatomic, copy, nullable) NSString *instance;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1ReportInstanceStatusResponse.
 *
 *  Reports the latest status for a runtime instance.
 *
 *  @param object The @c
 *    GTLRApigee_GoogleCloudApigeeV1ReportInstanceStatusRequest to include in
 *    the query.
 *  @param instance The name of the instance reporting this status. For SaaS the
 *    request
 *    will be rejected if no instance exists under this name.
 *    Format is organizations/{org}/instances/{instance}
 *
 *  @return GTLRApigeeQuery_OrganizationsInstancesReportStatus
 */
+ (instancetype)queryWithObject:(GTLRApigee_GoogleCloudApigeeV1ReportInstanceStatusRequest *)object
                       instance:(NSString *)instance;

@end

/**
 *  Creates a key value map in an organization.
 *
 *  Method: apigee.organizations.keyvaluemaps.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsKeyvaluemapsCreate : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsKeyvaluemapsCreateWithObject:parent:]

/**
 *  Required. The name of the organization in which to create the key value map
 *  file. Must be of the form `organizations/{organization}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1KeyValueMap.
 *
 *  Creates a key value map in an organization.
 *
 *  @param object The @c GTLRApigee_GoogleCloudApigeeV1KeyValueMap to include in
 *    the query.
 *  @param parent Required. The name of the organization in which to create the
 *    key value map
 *    file. Must be of the form `organizations/{organization}`.
 *
 *  @return GTLRApigeeQuery_OrganizationsKeyvaluemapsCreate
 */
+ (instancetype)queryWithObject:(GTLRApigee_GoogleCloudApigeeV1KeyValueMap *)object
                         parent:(NSString *)parent;

@end

/**
 *  Delete a key value map in an organization.
 *
 *  Method: apigee.organizations.keyvaluemaps.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsKeyvaluemapsDelete : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsKeyvaluemapsDeleteWithname:]

/**
 *  Required. The name of the key value map.
 *  Must be of the form
 *  `organizations/{organization}/keyvaluemaps/{keyvaluemap}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1KeyValueMap.
 *
 *  Delete a key value map in an organization.
 *
 *  @param name Required. The name of the key value map.
 *    Must be of the form
 *    `organizations/{organization}/keyvaluemaps/{keyvaluemap}`.
 *
 *  @return GTLRApigeeQuery_OrganizationsKeyvaluemapsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists the Apigee organizations and associated GCP projects that you have
 *  permission to access. See
 *  [Organizations](https://docs.apigee.com/hybrid/latest/terminology#organizations).
 *
 *  Method: apigee.organizations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsList : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsListWithparent:]

/**
 *  Required. Use the following structure in your request:
 *  `organizations`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1ListOrganizationsResponse.
 *
 *  Lists the Apigee organizations and associated GCP projects that you have
 *  permission to access. See
 *  [Organizations](https://docs.apigee.com/hybrid/latest/terminology#organizations).
 *
 *  @param parent Required. Use the following structure in your request:
 *    `organizations`
 *
 *  @return GTLRApigeeQuery_OrganizationsList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: apigee.organizations.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsOperationsGet : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsOperationsGetWithname:]

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleLongrunningOperation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRApigeeQuery_OrganizationsOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *  NOTE: the `name` binding allows API services to override the binding
 *  to use different resource name schemes, such as `users/ * /operations`. To
 *  override the binding, API services can add a binding such as
 *  `"/v1/{name=users/ *}/operations"` to their service configuration.
 *  For backwards compatibility, the default name includes the operations
 *  collection id, however overriding users must ensure the name binding
 *  is the parent resource, without the operations collection id.
 *
 *  Method: apigee.organizations.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsOperationsList : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsOperationsListWithname:]

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRApigee_GoogleLongrunningListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *  NOTE: the `name` binding allows API services to override the binding
 *  to use different resource name schemes, such as `users/ * /operations`. To
 *  override the binding, API services can add a binding such as
 *  `"/v1/{name=users/ *}/operations"` to their service configuration.
 *  For backwards compatibility, the default name includes the operations
 *  collection id, however overriding users must ensure the name binding
 *  is the parent resource, without the operations collection id.
 *
 *  @param name The name of the operation's parent resource.
 *
 *  @return GTLRApigeeQuery_OrganizationsOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Creates a Custom Report for an Organization. A Custom Report
 *  provides Apigee Customers to create custom dashboards in addition
 *  to the standard dashboards which are provided. The Custom Report in its
 *  simplest form contains specifications about metrics, dimensions and
 *  filters. It is important to note that the custom report by itself does not
 *  provide an executable entity. The Edge UI converts the custom report
 *  definition into an analytics query and displays the result in a chart.
 *
 *  Method: apigee.organizations.reports.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsReportsCreate : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsReportsCreateWithObject:parent:]

/**
 *  Required. The parent organization name under which the Custom Report will
 *  be created. Must be of the form:
 *  `organizations/{organization_id}/reports`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1CustomReport.
 *
 *  Creates a Custom Report for an Organization. A Custom Report
 *  provides Apigee Customers to create custom dashboards in addition
 *  to the standard dashboards which are provided. The Custom Report in its
 *  simplest form contains specifications about metrics, dimensions and
 *  filters. It is important to note that the custom report by itself does not
 *  provide an executable entity. The Edge UI converts the custom report
 *  definition into an analytics query and displays the result in a chart.
 *
 *  @param object The @c GTLRApigee_GoogleCloudApigeeV1CustomReport to include
 *    in the query.
 *  @param parent Required. The parent organization name under which the Custom
 *    Report will
 *    be created. Must be of the form:
 *    `organizations/{organization_id}/reports`
 *
 *  @return GTLRApigeeQuery_OrganizationsReportsCreate
 */
+ (instancetype)queryWithObject:(GTLRApigee_GoogleCloudApigeeV1CustomReport *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes an existing custom report definition
 *
 *  Method: apigee.organizations.reports.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsReportsDelete : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsReportsDeleteWithname:]

/**
 *  Required. Custom Report name of the form:
 *  `organizations/{organization_id}/reports/{report_name}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1DeleteCustomReportResponse.
 *
 *  Deletes an existing custom report definition
 *
 *  @param name Required. Custom Report name of the form:
 *    `organizations/{organization_id}/reports/{report_name}`
 *
 *  @return GTLRApigeeQuery_OrganizationsReportsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Retrieve a custom report definition.
 *
 *  Method: apigee.organizations.reports.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsReportsGet : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsReportsGetWithname:]

/**
 *  Required. Custom Report name of the form:
 *  `organizations/{organization_id}/reports/{report_name}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1CustomReport.
 *
 *  Retrieve a custom report definition.
 *
 *  @param name Required. Custom Report name of the form:
 *    `organizations/{organization_id}/reports/{report_name}`
 *
 *  @return GTLRApigeeQuery_OrganizationsReportsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Return a list of Custom Reports
 *
 *  Method: apigee.organizations.reports.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsReportsList : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsReportsListWithparent:]

/** Set to 'true' to get expanded details about each custom report. */
@property(nonatomic, assign) BOOL expand;

/**
 *  Required. The parent organization name under which the API product will
 *  be listed
 *  `organizations/{organization_id}/reports`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1ListCustomReportsResponse.
 *
 *  Return a list of Custom Reports
 *
 *  @param parent Required. The parent organization name under which the API
 *    product will
 *    be listed
 *    `organizations/{organization_id}/reports`
 *
 *  @return GTLRApigeeQuery_OrganizationsReportsList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Update an existing custom report definition
 *
 *  Method: apigee.organizations.reports.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsReportsUpdate : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsReportsUpdateWithObject:name:]

/**
 *  Required. Custom Report name of the form:
 *  `organizations/{organization_id}/reports/{report_name}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1CustomReport.
 *
 *  Update an existing custom report definition
 *
 *  @param object The @c GTLRApigee_GoogleCloudApigeeV1CustomReport to include
 *    in the query.
 *  @param name Required. Custom Report name of the form:
 *    `organizations/{organization_id}/reports/{report_name}`
 *
 *  @return GTLRApigeeQuery_OrganizationsReportsUpdate
 */
+ (instancetype)queryWithObject:(GTLRApigee_GoogleCloudApigeeV1CustomReport *)object
                           name:(NSString *)name;

@end

/**
 *  Sets the permissions required to allow the Synchronizer to download
 *  environment data from the control plane. You must call this API to enable
 *  proper functioning of hybrid.
 *  Pass the ETag when calling `setSyncAuthorization` to ensure that
 *  you are updating the correct version. To get an ETag,
 *  call [getSyncAuthorization](getSyncAuthorization).
 *  If you don't pass the ETag in the call to `setSyncAuthorization`, then the
 *  existing authorization is overwritten indiscriminately.
 *  For more information, see
 *  [Enable Synchronizer
 *  access](https://docs.apigee.com/hybrid/latest/synchronizer-access#enable-synchronizer-access).
 *  **Note**: Available to Apigee hybrid only.
 *
 *  Method: apigee.organizations.setSyncAuthorization
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsSetSyncAuthorization : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsSetSyncAuthorizationWithObject:name:]

/**
 *  Required. Name of the Apigee organization. Use the following structure in
 *  your
 *  request:
 *  `organizations/{org}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1SyncAuthorization.
 *
 *  Sets the permissions required to allow the Synchronizer to download
 *  environment data from the control plane. You must call this API to enable
 *  proper functioning of hybrid.
 *  Pass the ETag when calling `setSyncAuthorization` to ensure that
 *  you are updating the correct version. To get an ETag,
 *  call [getSyncAuthorization](getSyncAuthorization).
 *  If you don't pass the ETag in the call to `setSyncAuthorization`, then the
 *  existing authorization is overwritten indiscriminately.
 *  For more information, see
 *  [Enable Synchronizer
 *  access](https://docs.apigee.com/hybrid/latest/synchronizer-access#enable-synchronizer-access).
 *  **Note**: Available to Apigee hybrid only.
 *
 *  @param object The @c GTLRApigee_GoogleCloudApigeeV1SyncAuthorization to
 *    include in the query.
 *  @param name Required. Name of the Apigee organization. Use the following
 *    structure in your
 *    request:
 *    `organizations/{org}`
 *
 *  @return GTLRApigeeQuery_OrganizationsSetSyncAuthorization
 */
+ (instancetype)queryWithObject:(GTLRApigee_GoogleCloudApigeeV1SyncAuthorization *)object
                           name:(NSString *)name;

@end

/**
 *  Uploads a ZIP-formatted shared flow configuration bundle to an
 *  organization. If the shared flow already exists, this creates a new
 *  revision of it. If the shared flow does not exist, this creates it.
 *  Once imported, the shared flow revision must be deployed before it can be
 *  accessed at runtime.
 *  The size limit of a shared flow bundle is 15 MB.
 *
 *  Method: apigee.organizations.sharedflows.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsSharedflowsCreate : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsSharedflowsCreateWithObject:parent:]

/** Required. Must be set to either `import` or `validate`. */
@property(nonatomic, copy, nullable) NSString *action;

/** Required. The name to give the shared flow */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. The name of the parent organization under which to create the
 *  shared flow. Must be of the form:
 *  `organizations/{organization_id}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1SharedFlowRevision.
 *
 *  Uploads a ZIP-formatted shared flow configuration bundle to an
 *  organization. If the shared flow already exists, this creates a new
 *  revision of it. If the shared flow does not exist, this creates it.
 *  Once imported, the shared flow revision must be deployed before it can be
 *  accessed at runtime.
 *  The size limit of a shared flow bundle is 15 MB.
 *
 *  @param object The @c GTLRApigee_GoogleApiHttpBody to include in the query.
 *  @param parent Required. The name of the parent organization under which to
 *    create the
 *    shared flow. Must be of the form:
 *    `organizations/{organization_id}`
 *
 *  @return GTLRApigeeQuery_OrganizationsSharedflowsCreate
 */
+ (instancetype)queryWithObject:(GTLRApigee_GoogleApiHttpBody *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a shared flow and all it's revisions. The shared flow must be
 *  undeployed before you can delete it.
 *
 *  Method: apigee.organizations.sharedflows.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsSharedflowsDelete : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsSharedflowsDeleteWithname:]

/**
 *  Required. shared flow name of the form:
 *  `organizations/{organization_id}/sharedflows/{shared_flow_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1SharedFlow.
 *
 *  Deletes a shared flow and all it's revisions. The shared flow must be
 *  undeployed before you can delete it.
 *
 *  @param name Required. shared flow name of the form:
 *    `organizations/{organization_id}/sharedflows/{shared_flow_id}`
 *
 *  @return GTLRApigeeQuery_OrganizationsSharedflowsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists all deployments of a shared flow.
 *
 *  Method: apigee.organizations.sharedflows.deployments.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsSharedflowsDeploymentsList : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsSharedflowsDeploymentsListWithparent:]

/**
 *  Required. Name of the shared flow for which to return deployment information
 *  in the
 *  following format:
 *  `organizations/{org}/sharedflows/{sharedflow}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1ListDeploymentsResponse.
 *
 *  Lists all deployments of a shared flow.
 *
 *  @param parent Required. Name of the shared flow for which to return
 *    deployment information in the
 *    following format:
 *    `organizations/{org}/sharedflows/{sharedflow}`
 *
 *  @return GTLRApigeeQuery_OrganizationsSharedflowsDeploymentsList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Gets a shared flow by name, including a list of its revisions.
 *
 *  Method: apigee.organizations.sharedflows.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsSharedflowsGet : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsSharedflowsGetWithname:]

/**
 *  Required. The name of the shared flow to get. Must be of the
 *  form:
 *  `organizations/{organization_id}/sharedflows/{shared_flow_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1SharedFlow.
 *
 *  Gets a shared flow by name, including a list of its revisions.
 *
 *  @param name Required. The name of the shared flow to get. Must be of the
 *    form:
 *    `organizations/{organization_id}/sharedflows/{shared_flow_id}`
 *
 *  @return GTLRApigeeQuery_OrganizationsSharedflowsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists all shared flows in the organization.
 *
 *  Method: apigee.organizations.sharedflows.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsSharedflowsList : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsSharedflowsListWithparent:]

/** Indicates whether to include shared flow metadata in the response. */
@property(nonatomic, assign) BOOL includeMetaData;

/** Indicates whether to include a list of revisions in the response. */
@property(nonatomic, assign) BOOL includeRevisions;

/**
 *  Required. The name of the parent organization under which to get shared
 *  flows. Must be of the form:
 *  `organizations/{organization_id}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1ListSharedFlowsResponse.
 *
 *  Lists all shared flows in the organization.
 *
 *  @param parent Required. The name of the parent organization under which to
 *    get shared
 *    flows. Must be of the form:
 *    `organizations/{organization_id}`
 *
 *  @return GTLRApigeeQuery_OrganizationsSharedflowsList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Deletes a shared flow and all associated policies, resources, and
 *  revisions. You must undeploy the shared flow before deleting it.
 *
 *  Method: apigee.organizations.sharedflows.revisions.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsSharedflowsRevisionsDelete : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsSharedflowsRevisionsDeleteWithname:]

/**
 *  Required. The name of the shared flow revision to delete. Must be of the
 *  form:
 *  `organizations/{organization_id}/sharedflows/{shared_flow_id}/revisions/{revision_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1SharedFlowRevision.
 *
 *  Deletes a shared flow and all associated policies, resources, and
 *  revisions. You must undeploy the shared flow before deleting it.
 *
 *  @param name Required. The name of the shared flow revision to delete. Must
 *    be of the
 *    form:
 *    `organizations/{organization_id}/sharedflows/{shared_flow_id}/revisions/{revision_id}`
 *
 *  @return GTLRApigeeQuery_OrganizationsSharedflowsRevisionsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists all deployments of a shared flow revision.
 *
 *  Method: apigee.organizations.sharedflows.revisions.deployments.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsSharedflowsRevisionsDeploymentsList : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsSharedflowsRevisionsDeploymentsListWithparent:]

/**
 *  Required. Name of the API proxy revision for which to return deployment
 *  information
 *  in the following format:
 *  `organizations/{org}/sharedflows/{sharedflow}/revisions/{rev}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1ListDeploymentsResponse.
 *
 *  Lists all deployments of a shared flow revision.
 *
 *  @param parent Required. Name of the API proxy revision for which to return
 *    deployment information
 *    in the following format:
 *    `organizations/{org}/sharedflows/{sharedflow}/revisions/{rev}`.
 *
 *  @return GTLRApigeeQuery_OrganizationsSharedflowsRevisionsDeploymentsList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Gets a revision of a shared flow.
 *  If `format=bundle` is passed, it instead outputs a shared flow revision as
 *  a ZIP-formatted bundle of code and config files.
 *
 *  Method: apigee.organizations.sharedflows.revisions.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsSharedflowsRevisionsGet : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsSharedflowsRevisionsGetWithname:]

/**
 *  Specify `bundle` to export the contents of the shared flow bundle.
 *  Otherwise, the bundle metadata is returned.
 */
@property(nonatomic, copy, nullable) NSString *format;

/**
 *  Required. The name of the shared flow revision to get. Must be of the
 *  form:
 *  `organizations/{organization_id}/sharedflows/{shared_flow_id}/revisions/{revision_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleApiHttpBody.
 *
 *  Gets a revision of a shared flow.
 *  If `format=bundle` is passed, it instead outputs a shared flow revision as
 *  a ZIP-formatted bundle of code and config files.
 *
 *  @param name Required. The name of the shared flow revision to get. Must be
 *    of the
 *    form:
 *    `organizations/{organization_id}/sharedflows/{shared_flow_id}/revisions/{revision_id}`
 *
 *  @return GTLRApigeeQuery_OrganizationsSharedflowsRevisionsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Updates a shared flow revision. This operation is only allowed on revisions
 *  which have never been deployed. After deployment a revision becomes
 *  immutable, even if it becomes undeployed.
 *  The payload is a ZIP-formatted shared flow. Content type must be either
 *  multipart/form-data or application/octet-stream.
 *
 *  Method: apigee.organizations.sharedflows.revisions.updateSharedFlowRevision
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsSharedflowsRevisionsUpdateSharedFlowRevision : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsSharedflowsRevisionsUpdateSharedFlowRevisionWithObject:name:]

/**
 *  Required. The name of the shared flow revision to update.
 *  Must be of the form:
 *  `organizations/{organization_id}/sharedflows/{shared_flow_id}/revisions/{revision_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Ignored. All uploads are validated regardless of the value of this field.
 *  It is kept for compatibility with existing APIs. Must be `true` or `false`
 *  if provided.
 */
@property(nonatomic, assign) BOOL validate;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1SharedFlowRevision.
 *
 *  Updates a shared flow revision. This operation is only allowed on revisions
 *  which have never been deployed. After deployment a revision becomes
 *  immutable, even if it becomes undeployed.
 *  The payload is a ZIP-formatted shared flow. Content type must be either
 *  multipart/form-data or application/octet-stream.
 *
 *  @param object The @c GTLRApigee_GoogleApiHttpBody to include in the query.
 *  @param name Required. The name of the shared flow revision to update.
 *    Must be of the form:
 *    `organizations/{organization_id}/sharedflows/{shared_flow_id}/revisions/{revision_id}`
 *
 *  @return GTLRApigeeQuery_OrganizationsSharedflowsRevisionsUpdateSharedFlowRevision
 */
+ (instancetype)queryWithObject:(GTLRApigee_GoogleApiHttpBody *)object
                           name:(NSString *)name;

@end

/**
 *  Updates the properties for an Apigee organization. No other fields in the
 *  organization profile will be updated.
 *
 *  Method: apigee.organizations.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeApigeeCloudPlatform
 */
@interface GTLRApigeeQuery_OrganizationsUpdate : GTLRApigeeQuery
// Previous library name was
//   +[GTLQueryApigee queryForOrganizationsUpdateWithObject:name:]

/**
 *  Required. Apigee organization name in the following format:
 *  `organizations/{org}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRApigee_GoogleCloudApigeeV1Organization.
 *
 *  Updates the properties for an Apigee organization. No other fields in the
 *  organization profile will be updated.
 *
 *  @param object The @c GTLRApigee_GoogleCloudApigeeV1Organization to include
 *    in the query.
 *  @param name Required. Apigee organization name in the following format:
 *    `organizations/{org}`
 *
 *  @return GTLRApigeeQuery_OrganizationsUpdate
 */
+ (instancetype)queryWithObject:(GTLRApigee_GoogleCloudApigeeV1Organization *)object
                           name:(NSString *)name;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
