// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Firebase App Check API (firebaseappcheck/v1beta)
// Description:
//   App Check works alongside other Firebase services to help protect your
//   backend resources from abuse, such as billing fraud or phishing. With App
//   Check, devices running your app will use an app or device attestation
//   provider that attests to one or both of the following: * Requests originate
//   from your authentic app * Requests originate from an authentic, untampered
//   device This attestation is attached to every request your app makes to your
//   Firebase backend resources. The Firebase App Check REST API allows you to
//   manage your App Check configurations programmatically. It also allows you
//   to exchange attestation material for App Check tokens directly without
//   using a Firebase SDK. Finally, it allows you to obtain the public key set
//   necessary to validate an App Check token yourself. [Learn more about App
//   Check](https://firebase.google.com/docs/app-check).
// Documentation:
//   https://firebase.google.com/docs/app-check

#import "GTLRFirebaseappcheckQuery.h"

#import "GTLRFirebaseappcheckObjects.h"

@implementation GTLRFirebaseappcheckQuery

@dynamic fields;

@end

@implementation GTLRFirebaseappcheckQuery_JwksGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}";
  GTLRFirebaseappcheckQuery_JwksGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaPublicJwkSet class];
  query.loggingName = @"firebaseappcheck.jwks.get";
  return query;
}

@end

@implementation GTLRFirebaseappcheckQuery_ProjectsAppsDebugTokensCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaDebugToken *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1beta/{+parent}/debugTokens";
  GTLRFirebaseappcheckQuery_ProjectsAppsDebugTokensCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaDebugToken class];
  query.loggingName = @"firebaseappcheck.projects.apps.debugTokens.create";
  return query;
}

@end

@implementation GTLRFirebaseappcheckQuery_ProjectsAppsDebugTokensDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}";
  GTLRFirebaseappcheckQuery_ProjectsAppsDebugTokensDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRFirebaseappcheck_GoogleProtobufEmpty class];
  query.loggingName = @"firebaseappcheck.projects.apps.debugTokens.delete";
  return query;
}

@end

@implementation GTLRFirebaseappcheckQuery_ProjectsAppsDebugTokensGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}";
  GTLRFirebaseappcheckQuery_ProjectsAppsDebugTokensGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaDebugToken class];
  query.loggingName = @"firebaseappcheck.projects.apps.debugTokens.get";
  return query;
}

@end

@implementation GTLRFirebaseappcheckQuery_ProjectsAppsDebugTokensList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1beta/{+parent}/debugTokens";
  GTLRFirebaseappcheckQuery_ProjectsAppsDebugTokensList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaListDebugTokensResponse class];
  query.loggingName = @"firebaseappcheck.projects.apps.debugTokens.list";
  return query;
}

@end

@implementation GTLRFirebaseappcheckQuery_ProjectsAppsDebugTokensPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaDebugToken *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}";
  GTLRFirebaseappcheckQuery_ProjectsAppsDebugTokensPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaDebugToken class];
  query.loggingName = @"firebaseappcheck.projects.apps.debugTokens.patch";
  return query;
}

@end

@implementation GTLRFirebaseappcheckQuery_ProjectsAppsDeviceCheckConfigBatchGet

@dynamic names, parent;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"names" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1beta/{+parent}/apps/-/deviceCheckConfig:batchGet";
  GTLRFirebaseappcheckQuery_ProjectsAppsDeviceCheckConfigBatchGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaBatchGetDeviceCheckConfigsResponse class];
  query.loggingName = @"firebaseappcheck.projects.apps.deviceCheckConfig.batchGet";
  return query;
}

@end

@implementation GTLRFirebaseappcheckQuery_ProjectsAppsDeviceCheckConfigGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}";
  GTLRFirebaseappcheckQuery_ProjectsAppsDeviceCheckConfigGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaDeviceCheckConfig class];
  query.loggingName = @"firebaseappcheck.projects.apps.deviceCheckConfig.get";
  return query;
}

@end

@implementation GTLRFirebaseappcheckQuery_ProjectsAppsDeviceCheckConfigPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaDeviceCheckConfig *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}";
  GTLRFirebaseappcheckQuery_ProjectsAppsDeviceCheckConfigPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaDeviceCheckConfig class];
  query.loggingName = @"firebaseappcheck.projects.apps.deviceCheckConfig.patch";
  return query;
}

@end

@implementation GTLRFirebaseappcheckQuery_ProjectsAppsExchangeAppAttestAssertion

@dynamic app;

+ (instancetype)queryWithObject:(GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaExchangeAppAttestAssertionRequest *)object
                            app:(NSString *)app {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"app" ];
  NSString *pathURITemplate = @"v1beta/{+app}:exchangeAppAttestAssertion";
  GTLRFirebaseappcheckQuery_ProjectsAppsExchangeAppAttestAssertion *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.app = app;
  query.expectedObjectClass = [GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaAttestationTokenResponse class];
  query.loggingName = @"firebaseappcheck.projects.apps.exchangeAppAttestAssertion";
  return query;
}

@end

@implementation GTLRFirebaseappcheckQuery_ProjectsAppsExchangeAppAttestAttestation

@dynamic app;

+ (instancetype)queryWithObject:(GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaExchangeAppAttestAttestationRequest *)object
                            app:(NSString *)app {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"app" ];
  NSString *pathURITemplate = @"v1beta/{+app}:exchangeAppAttestAttestation";
  GTLRFirebaseappcheckQuery_ProjectsAppsExchangeAppAttestAttestation *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.app = app;
  query.expectedObjectClass = [GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaExchangeAppAttestAttestationResponse class];
  query.loggingName = @"firebaseappcheck.projects.apps.exchangeAppAttestAttestation";
  return query;
}

@end

@implementation GTLRFirebaseappcheckQuery_ProjectsAppsExchangeCustomToken

@dynamic app;

+ (instancetype)queryWithObject:(GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaExchangeCustomTokenRequest *)object
                            app:(NSString *)app {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"app" ];
  NSString *pathURITemplate = @"v1beta/{+app}:exchangeCustomToken";
  GTLRFirebaseappcheckQuery_ProjectsAppsExchangeCustomToken *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.app = app;
  query.expectedObjectClass = [GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaAttestationTokenResponse class];
  query.loggingName = @"firebaseappcheck.projects.apps.exchangeCustomToken";
  return query;
}

@end

@implementation GTLRFirebaseappcheckQuery_ProjectsAppsExchangeDebugToken

@dynamic app;

+ (instancetype)queryWithObject:(GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaExchangeDebugTokenRequest *)object
                            app:(NSString *)app {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"app" ];
  NSString *pathURITemplate = @"v1beta/{+app}:exchangeDebugToken";
  GTLRFirebaseappcheckQuery_ProjectsAppsExchangeDebugToken *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.app = app;
  query.expectedObjectClass = [GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaAttestationTokenResponse class];
  query.loggingName = @"firebaseappcheck.projects.apps.exchangeDebugToken";
  return query;
}

@end

@implementation GTLRFirebaseappcheckQuery_ProjectsAppsExchangeDeviceCheckToken

@dynamic app;

+ (instancetype)queryWithObject:(GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaExchangeDeviceCheckTokenRequest *)object
                            app:(NSString *)app {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"app" ];
  NSString *pathURITemplate = @"v1beta/{+app}:exchangeDeviceCheckToken";
  GTLRFirebaseappcheckQuery_ProjectsAppsExchangeDeviceCheckToken *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.app = app;
  query.expectedObjectClass = [GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaAttestationTokenResponse class];
  query.loggingName = @"firebaseappcheck.projects.apps.exchangeDeviceCheckToken";
  return query;
}

@end

@implementation GTLRFirebaseappcheckQuery_ProjectsAppsExchangeRecaptchaToken

@dynamic app;

+ (instancetype)queryWithObject:(GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaExchangeRecaptchaTokenRequest *)object
                            app:(NSString *)app {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"app" ];
  NSString *pathURITemplate = @"v1beta/{+app}:exchangeRecaptchaToken";
  GTLRFirebaseappcheckQuery_ProjectsAppsExchangeRecaptchaToken *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.app = app;
  query.expectedObjectClass = [GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaAttestationTokenResponse class];
  query.loggingName = @"firebaseappcheck.projects.apps.exchangeRecaptchaToken";
  return query;
}

@end

@implementation GTLRFirebaseappcheckQuery_ProjectsAppsExchangeSafetyNetToken

@dynamic app;

+ (instancetype)queryWithObject:(GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaExchangeSafetyNetTokenRequest *)object
                            app:(NSString *)app {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"app" ];
  NSString *pathURITemplate = @"v1beta/{+app}:exchangeSafetyNetToken";
  GTLRFirebaseappcheckQuery_ProjectsAppsExchangeSafetyNetToken *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.app = app;
  query.expectedObjectClass = [GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaAttestationTokenResponse class];
  query.loggingName = @"firebaseappcheck.projects.apps.exchangeSafetyNetToken";
  return query;
}

@end

@implementation GTLRFirebaseappcheckQuery_ProjectsAppsGenerateAppAttestChallenge

@dynamic app;

+ (instancetype)queryWithObject:(GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaGenerateAppAttestChallengeRequest *)object
                            app:(NSString *)app {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"app" ];
  NSString *pathURITemplate = @"v1beta/{+app}:generateAppAttestChallenge";
  GTLRFirebaseappcheckQuery_ProjectsAppsGenerateAppAttestChallenge *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.app = app;
  query.expectedObjectClass = [GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaAppAttestChallengeResponse class];
  query.loggingName = @"firebaseappcheck.projects.apps.generateAppAttestChallenge";
  return query;
}

@end

@implementation GTLRFirebaseappcheckQuery_ProjectsAppsRecaptchaConfigBatchGet

@dynamic names, parent;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"names" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1beta/{+parent}/apps/-/recaptchaConfig:batchGet";
  GTLRFirebaseappcheckQuery_ProjectsAppsRecaptchaConfigBatchGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaBatchGetRecaptchaConfigsResponse class];
  query.loggingName = @"firebaseappcheck.projects.apps.recaptchaConfig.batchGet";
  return query;
}

@end

@implementation GTLRFirebaseappcheckQuery_ProjectsAppsRecaptchaConfigGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}";
  GTLRFirebaseappcheckQuery_ProjectsAppsRecaptchaConfigGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaRecaptchaConfig class];
  query.loggingName = @"firebaseappcheck.projects.apps.recaptchaConfig.get";
  return query;
}

@end

@implementation GTLRFirebaseappcheckQuery_ProjectsAppsRecaptchaConfigPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaRecaptchaConfig *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}";
  GTLRFirebaseappcheckQuery_ProjectsAppsRecaptchaConfigPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaRecaptchaConfig class];
  query.loggingName = @"firebaseappcheck.projects.apps.recaptchaConfig.patch";
  return query;
}

@end

@implementation GTLRFirebaseappcheckQuery_ProjectsServicesBatchUpdate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaBatchUpdateServicesRequest *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1beta/{+parent}/services:batchUpdate";
  GTLRFirebaseappcheckQuery_ProjectsServicesBatchUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaBatchUpdateServicesResponse class];
  query.loggingName = @"firebaseappcheck.projects.services.batchUpdate";
  return query;
}

@end

@implementation GTLRFirebaseappcheckQuery_ProjectsServicesGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}";
  GTLRFirebaseappcheckQuery_ProjectsServicesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaService class];
  query.loggingName = @"firebaseappcheck.projects.services.get";
  return query;
}

@end

@implementation GTLRFirebaseappcheckQuery_ProjectsServicesList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1beta/{+parent}/services";
  GTLRFirebaseappcheckQuery_ProjectsServicesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaListServicesResponse class];
  query.loggingName = @"firebaseappcheck.projects.services.list";
  return query;
}

@end

@implementation GTLRFirebaseappcheckQuery_ProjectsServicesPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaService *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}";
  GTLRFirebaseappcheckQuery_ProjectsServicesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaService class];
  query.loggingName = @"firebaseappcheck.projects.services.patch";
  return query;
}

@end
