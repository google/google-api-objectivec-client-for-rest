// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Firebase App Check API (firebaseappcheck/v1beta)
// Description:
//   App Check works alongside other Firebase services to help protect your
//   backend resources from abuse, such as billing fraud or phishing. With App
//   Check, devices running your app will use an app or device attestation
//   provider that attests to one or both of the following: * Requests originate
//   from your authentic app * Requests originate from an authentic, untampered
//   device This attestation is attached to every request your app makes to your
//   Firebase backend resources. The Firebase App Check REST API allows you to
//   manage your App Check configurations programmatically. It also allows you
//   to exchange attestation material for App Check tokens directly without
//   using a Firebase SDK. Finally, it allows you to obtain the public key set
//   necessary to validate an App Check token yourself. [Learn more about App
//   Check](https://firebase.google.com/docs/app-check).
// Documentation:
//   https://firebase.google.com/docs/app-check

#if SWIFT_PACKAGE || GTLR_USE_MODULAR_IMPORT
  @import GoogleAPIClientForRESTCore;
#elif GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaBatchUpdateServicesRequest;
@class GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaDebugToken;
@class GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaDeviceCheckConfig;
@class GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaExchangeAppAttestAssertionRequest;
@class GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaExchangeAppAttestAttestationRequest;
@class GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaExchangeCustomTokenRequest;
@class GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaExchangeDebugTokenRequest;
@class GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaExchangeDeviceCheckTokenRequest;
@class GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaExchangeRecaptchaTokenRequest;
@class GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaExchangeSafetyNetTokenRequest;
@class GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaGenerateAppAttestChallengeRequest;
@class GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaRecaptchaConfig;
@class GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaService;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Firebaseappcheck query classes.
 */
@interface GTLRFirebaseappcheckQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Returns a public JWK set as specified by [RFC
 *  7517](https://tools.ietf.org/html/rfc7517) that can be used to verify App
 *  Check tokens. Exactly one of the public keys in the returned set will
 *  successfully validate any App Check token that is currently valid.
 *
 *  Method: firebaseappcheck.jwks.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_JwksGet : GTLRFirebaseappcheckQuery

/**
 *  Required. The relative resource name to the public JWK set. Must always be
 *  exactly the string `jwks`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaPublicJwkSet.
 *
 *  Returns a public JWK set as specified by [RFC
 *  7517](https://tools.ietf.org/html/rfc7517) that can be used to verify App
 *  Check tokens. Exactly one of the public keys in the returned set will
 *  successfully validate any App Check token that is currently valid.
 *
 *  @param name Required. The relative resource name to the public JWK set. Must
 *    always be exactly the string `jwks`.
 *
 *  @return GTLRFirebaseappcheckQuery_JwksGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Creates a new DebugToken for the specified app. For security reasons, after
 *  the creation operation completes, the `token` field cannot be updated or
 *  retrieved, but you can revoke the debug token using DeleteDebugToken. Each
 *  app can have a maximum of 20 debug tokens.
 *
 *  Method: firebaseappcheck.projects.apps.debugTokens.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsAppsDebugTokensCreate : GTLRFirebaseappcheckQuery

/**
 *  Required. The relative resource name of the parent app in which the
 *  specified DebugToken will be created, in the format: ```
 *  projects/{project_number}/apps/{app_id} ```
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaDebugToken.
 *
 *  Creates a new DebugToken for the specified app. For security reasons, after
 *  the creation operation completes, the `token` field cannot be updated or
 *  retrieved, but you can revoke the debug token using DeleteDebugToken. Each
 *  app can have a maximum of 20 debug tokens.
 *
 *  @param object The @c
 *    GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaDebugToken to include in
 *    the query.
 *  @param parent Required. The relative resource name of the parent app in
 *    which the specified DebugToken will be created, in the format: ```
 *    projects/{project_number}/apps/{app_id} ```
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsAppsDebugTokensCreate
 */
+ (instancetype)queryWithObject:(GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaDebugToken *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes the specified DebugToken. A deleted debug token cannot be used to
 *  exchange for an App Check token. Use this method when you suspect the secret
 *  `token` has been compromised or when you no longer need the debug token.
 *
 *  Method: firebaseappcheck.projects.apps.debugTokens.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsAppsDebugTokensDelete : GTLRFirebaseappcheckQuery

/**
 *  Required. The relative resource name of the DebugToken to delete, in the
 *  format: ```
 *  projects/{project_number}/apps/{app_id}/debugTokens/{debug_token_id} ```
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseappcheck_GoogleProtobufEmpty.
 *
 *  Deletes the specified DebugToken. A deleted debug token cannot be used to
 *  exchange for an App Check token. Use this method when you suspect the secret
 *  `token` has been compromised or when you no longer need the debug token.
 *
 *  @param name Required. The relative resource name of the DebugToken to
 *    delete, in the format: ```
 *    projects/{project_number}/apps/{app_id}/debugTokens/{debug_token_id} ```
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsAppsDebugTokensDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the specified DebugToken. For security reasons, the `token` field is
 *  never populated in the response.
 *
 *  Method: firebaseappcheck.projects.apps.debugTokens.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsAppsDebugTokensGet : GTLRFirebaseappcheckQuery

/**
 *  Required. The relative resource name of the debug token, in the format: ```
 *  projects/{project_number}/apps/{app_id}/debugTokens/{debug_token_id} ```
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaDebugToken.
 *
 *  Gets the specified DebugToken. For security reasons, the `token` field is
 *  never populated in the response.
 *
 *  @param name Required. The relative resource name of the debug token, in the
 *    format: ```
 *    projects/{project_number}/apps/{app_id}/debugTokens/{debug_token_id} ```
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsAppsDebugTokensGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists all DebugTokens for the specified app. For security reasons, the
 *  `token` field is never populated in the response.
 *
 *  Method: firebaseappcheck.projects.apps.debugTokens.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsAppsDebugTokensList : GTLRFirebaseappcheckQuery

/**
 *  The maximum number of DebugTokens to return in the response. Note that an
 *  app can have at most 20 debug tokens. The server may return fewer than this
 *  at its own discretion. If no value is specified (or too large a value is
 *  specified), the server will impose its own limit.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Token returned from a previous call to ListDebugTokens indicating where in
 *  the set of DebugTokens to resume listing. Provide this to retrieve the
 *  subsequent page. When paginating, all other parameters provided to
 *  ListDebugTokens must match the call that provided the page token; if they do
 *  not match, the result is undefined.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The relative resource name of the parent app for which to list
 *  each associated DebugToken, in the format: ```
 *  projects/{project_number}/apps/{app_id} ```
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaListDebugTokensResponse.
 *
 *  Lists all DebugTokens for the specified app. For security reasons, the
 *  `token` field is never populated in the response.
 *
 *  @param parent Required. The relative resource name of the parent app for
 *    which to list each associated DebugToken, in the format: ```
 *    projects/{project_number}/apps/{app_id} ```
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsAppsDebugTokensList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates the specified DebugToken. For security reasons, the `token` field
 *  cannot be updated, nor will it be populated in the response, but you can
 *  revoke the debug token using DeleteDebugToken.
 *
 *  Method: firebaseappcheck.projects.apps.debugTokens.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsAppsDebugTokensPatch : GTLRFirebaseappcheckQuery

/**
 *  The relative resource name of the debug token, in the format: ```
 *  projects/{project_number}/apps/{app_id}/debugTokens/{debug_token_id} ```
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. A comma-separated list of names of fields in the DebugToken to
 *  update. Example: `display_name`.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaDebugToken.
 *
 *  Updates the specified DebugToken. For security reasons, the `token` field
 *  cannot be updated, nor will it be populated in the response, but you can
 *  revoke the debug token using DeleteDebugToken.
 *
 *  @param object The @c
 *    GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaDebugToken to include in
 *    the query.
 *  @param name The relative resource name of the debug token, in the format:
 *    ``` projects/{project_number}/apps/{app_id}/debugTokens/{debug_token_id}
 *    ```
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsAppsDebugTokensPatch
 */
+ (instancetype)queryWithObject:(GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaDebugToken *)object
                           name:(NSString *)name;

@end

/**
 *  Gets the DeviceCheckConfigs for the specified list of apps atomically. For
 *  security reasons, the `private_key` field is never populated in the
 *  response.
 *
 *  Method: firebaseappcheck.projects.apps.deviceCheckConfig.batchGet
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsAppsDeviceCheckConfigBatchGet : GTLRFirebaseappcheckQuery

/**
 *  Required. The relative resource names of the DeviceCheckConfigs to retrieve,
 *  in the format ``` projects/{project_number}/apps/{app_id}/deviceCheckConfig
 *  ``` A maximum of 100 objects can be retrieved in a batch.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *names;

/**
 *  Required. The parent project name shared by all DeviceCheckConfigs being
 *  retrieved, in the format ``` projects/{project_number} ``` The parent
 *  collection in the `name` field of any resource being retrieved must match
 *  this field, or the entire batch fails.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaBatchGetDeviceCheckConfigsResponse.
 *
 *  Gets the DeviceCheckConfigs for the specified list of apps atomically. For
 *  security reasons, the `private_key` field is never populated in the
 *  response.
 *
 *  @param parent Required. The parent project name shared by all
 *    DeviceCheckConfigs being retrieved, in the format ```
 *    projects/{project_number} ``` The parent collection in the `name` field of
 *    any resource being retrieved must match this field, or the entire batch
 *    fails.
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsAppsDeviceCheckConfigBatchGet
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Gets the DeviceCheckConfig for the specified app. For security reasons, the
 *  `private_key` field is never populated in the response.
 *
 *  Method: firebaseappcheck.projects.apps.deviceCheckConfig.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsAppsDeviceCheckConfigGet : GTLRFirebaseappcheckQuery

/**
 *  Required. The relative resource name of the DeviceCheckConfig, in the
 *  format: ``` projects/{project_number}/apps/{app_id}/deviceCheckConfig ```
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c
 *  GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaDeviceCheckConfig.
 *
 *  Gets the DeviceCheckConfig for the specified app. For security reasons, the
 *  `private_key` field is never populated in the response.
 *
 *  @param name Required. The relative resource name of the DeviceCheckConfig,
 *    in the format: ```
 *    projects/{project_number}/apps/{app_id}/deviceCheckConfig ```
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsAppsDeviceCheckConfigGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Updates the DeviceCheckConfig for the specified app. While this
 *  configuration is incomplete or invalid, the app will be unable to exchange
 *  DeviceCheck tokens for App Check tokens. For security reasons, the
 *  `private_key` field is never populated in the response.
 *
 *  Method: firebaseappcheck.projects.apps.deviceCheckConfig.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsAppsDeviceCheckConfigPatch : GTLRFirebaseappcheckQuery

/**
 *  Required. The relative resource name of the DeviceCheck configuration
 *  object, in the format: ```
 *  projects/{project_number}/apps/{app_id}/deviceCheckConfig ```
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. A comma-separated list of names of fields in the DeviceCheckConfig
 *  Gets to update. Example: `key_id,private_key`.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c
 *  GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaDeviceCheckConfig.
 *
 *  Updates the DeviceCheckConfig for the specified app. While this
 *  configuration is incomplete or invalid, the app will be unable to exchange
 *  DeviceCheck tokens for App Check tokens. For security reasons, the
 *  `private_key` field is never populated in the response.
 *
 *  @param object The @c
 *    GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaDeviceCheckConfig to
 *    include in the query.
 *  @param name Required. The relative resource name of the DeviceCheck
 *    configuration object, in the format: ```
 *    projects/{project_number}/apps/{app_id}/deviceCheckConfig ```
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsAppsDeviceCheckConfigPatch
 */
+ (instancetype)queryWithObject:(GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaDeviceCheckConfig *)object
                           name:(NSString *)name;

@end

/**
 *  Accepts a AppAttest Artifact and Assertion, and uses the developer's
 *  preconfigured auth token to verify the token with Apple. Returns an
 *  AttestationToken with the App ID as specified by the `app` field included as
 *  attested claims.
 *
 *  Method: firebaseappcheck.projects.apps.exchangeAppAttestAssertion
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsAppsExchangeAppAttestAssertion : GTLRFirebaseappcheckQuery

/**
 *  Required. The full resource name to the iOS App. Format:
 *  "projects/{project_id}/apps/{app_id}"
 */
@property(nonatomic, copy, nullable) NSString *app;

/**
 *  Fetches a @c
 *  GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaAttestationTokenResponse.
 *
 *  Accepts a AppAttest Artifact and Assertion, and uses the developer's
 *  preconfigured auth token to verify the token with Apple. Returns an
 *  AttestationToken with the App ID as specified by the `app` field included as
 *  attested claims.
 *
 *  @param object The @c
 *    GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaExchangeAppAttestAssertionRequest
 *    to include in the query.
 *  @param app Required. The full resource name to the iOS App. Format:
 *    "projects/{project_id}/apps/{app_id}"
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsAppsExchangeAppAttestAssertion
 */
+ (instancetype)queryWithObject:(GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaExchangeAppAttestAssertionRequest *)object
                            app:(NSString *)app;

@end

/**
 *  Accepts a AppAttest CBOR Attestation, and uses the developer's preconfigured
 *  team and bundle IDs to verify the token with Apple. Returns an Attestation
 *  Artifact that can later be exchanged for an AttestationToken in
 *  ExchangeAppAttestAssertion.
 *
 *  Method: firebaseappcheck.projects.apps.exchangeAppAttestAttestation
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsAppsExchangeAppAttestAttestation : GTLRFirebaseappcheckQuery

/**
 *  Required. The full resource name to the iOS App. Format:
 *  "projects/{project_id}/apps/{app_id}"
 */
@property(nonatomic, copy, nullable) NSString *app;

/**
 *  Fetches a @c
 *  GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaExchangeAppAttestAttestationResponse.
 *
 *  Accepts a AppAttest CBOR Attestation, and uses the developer's preconfigured
 *  team and bundle IDs to verify the token with Apple. Returns an Attestation
 *  Artifact that can later be exchanged for an AttestationToken in
 *  ExchangeAppAttestAssertion.
 *
 *  @param object The @c
 *    GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaExchangeAppAttestAttestationRequest
 *    to include in the query.
 *  @param app Required. The full resource name to the iOS App. Format:
 *    "projects/{project_id}/apps/{app_id}"
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsAppsExchangeAppAttestAttestation
 */
+ (instancetype)queryWithObject:(GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaExchangeAppAttestAttestationRequest *)object
                            app:(NSString *)app;

@end

/**
 *  Validates a custom token signed using your project's Admin SDK service
 *  account credentials. If valid, returns an App Check token encapsulated in an
 *  AttestationTokenResponse.
 *
 *  Method: firebaseappcheck.projects.apps.exchangeCustomToken
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsAppsExchangeCustomToken : GTLRFirebaseappcheckQuery

/**
 *  Required. The relative resource name of the app, in the format: ```
 *  projects/{project_number}/apps/{app_id} ``` If necessary, the
 *  `project_number` element can be replaced with the project ID of the Firebase
 *  project. Learn more about using project identifiers in Google's [AIP
 *  2510](https://google.aip.dev/cloud/2510) standard.
 */
@property(nonatomic, copy, nullable) NSString *app;

/**
 *  Fetches a @c
 *  GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaAttestationTokenResponse.
 *
 *  Validates a custom token signed using your project's Admin SDK service
 *  account credentials. If valid, returns an App Check token encapsulated in an
 *  AttestationTokenResponse.
 *
 *  @param object The @c
 *    GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaExchangeCustomTokenRequest
 *    to include in the query.
 *  @param app Required. The relative resource name of the app, in the format:
 *    ``` projects/{project_number}/apps/{app_id} ``` If necessary, the
 *    `project_number` element can be replaced with the project ID of the
 *    Firebase project. Learn more about using project identifiers in Google's
 *    [AIP 2510](https://google.aip.dev/cloud/2510) standard.
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsAppsExchangeCustomToken
 */
+ (instancetype)queryWithObject:(GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaExchangeCustomTokenRequest *)object
                            app:(NSString *)app;

@end

/**
 *  Validates a debug token secret that you have previously created using
 *  CreateDebugToken. If valid, returns an App Check token encapsulated in an
 *  AttestationTokenResponse. Note that a restrictive quota is enforced on this
 *  method to prevent accidental exposure of the app to abuse.
 *
 *  Method: firebaseappcheck.projects.apps.exchangeDebugToken
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsAppsExchangeDebugToken : GTLRFirebaseappcheckQuery

/**
 *  Required. The relative resource name of the app, in the format: ```
 *  projects/{project_number}/apps/{app_id} ``` If necessary, the
 *  `project_number` element can be replaced with the project ID of the Firebase
 *  project. Learn more about using project identifiers in Google's [AIP
 *  2510](https://google.aip.dev/cloud/2510) standard.
 */
@property(nonatomic, copy, nullable) NSString *app;

/**
 *  Fetches a @c
 *  GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaAttestationTokenResponse.
 *
 *  Validates a debug token secret that you have previously created using
 *  CreateDebugToken. If valid, returns an App Check token encapsulated in an
 *  AttestationTokenResponse. Note that a restrictive quota is enforced on this
 *  method to prevent accidental exposure of the app to abuse.
 *
 *  @param object The @c
 *    GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaExchangeDebugTokenRequest
 *    to include in the query.
 *  @param app Required. The relative resource name of the app, in the format:
 *    ``` projects/{project_number}/apps/{app_id} ``` If necessary, the
 *    `project_number` element can be replaced with the project ID of the
 *    Firebase project. Learn more about using project identifiers in Google's
 *    [AIP 2510](https://google.aip.dev/cloud/2510) standard.
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsAppsExchangeDebugToken
 */
+ (instancetype)queryWithObject:(GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaExchangeDebugTokenRequest *)object
                            app:(NSString *)app;

@end

/**
 *  Accepts a
 *  [`device_token`](https://developer.apple.com/documentation/devicecheck/dcdevice)
 *  issued by DeviceCheck, and attempts to validate it with Apple. If valid,
 *  returns an App Check token encapsulated in an AttestationTokenResponse.
 *
 *  Method: firebaseappcheck.projects.apps.exchangeDeviceCheckToken
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsAppsExchangeDeviceCheckToken : GTLRFirebaseappcheckQuery

/**
 *  Required. The relative resource name of the iOS app, in the format: ```
 *  projects/{project_number}/apps/{app_id} ``` If necessary, the
 *  `project_number` element can be replaced with the project ID of the Firebase
 *  project. Learn more about using project identifiers in Google's [AIP
 *  2510](https://google.aip.dev/cloud/2510) standard.
 */
@property(nonatomic, copy, nullable) NSString *app;

/**
 *  Fetches a @c
 *  GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaAttestationTokenResponse.
 *
 *  Accepts a
 *  [`device_token`](https://developer.apple.com/documentation/devicecheck/dcdevice)
 *  issued by DeviceCheck, and attempts to validate it with Apple. If valid,
 *  returns an App Check token encapsulated in an AttestationTokenResponse.
 *
 *  @param object The @c
 *    GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaExchangeDeviceCheckTokenRequest
 *    to include in the query.
 *  @param app Required. The relative resource name of the iOS app, in the
 *    format: ``` projects/{project_number}/apps/{app_id} ``` If necessary, the
 *    `project_number` element can be replaced with the project ID of the
 *    Firebase project. Learn more about using project identifiers in Google's
 *    [AIP 2510](https://google.aip.dev/cloud/2510) standard.
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsAppsExchangeDeviceCheckToken
 */
+ (instancetype)queryWithObject:(GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaExchangeDeviceCheckTokenRequest *)object
                            app:(NSString *)app;

@end

/**
 *  Validates a [reCAPTCHA v3 response
 *  token](https://developers.google.com/recaptcha/docs/v3). If valid, returns
 *  an App Check token encapsulated in an AttestationTokenResponse.
 *
 *  Method: firebaseappcheck.projects.apps.exchangeRecaptchaToken
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsAppsExchangeRecaptchaToken : GTLRFirebaseappcheckQuery

/**
 *  Required. The relative resource name of the web app, in the format: ```
 *  projects/{project_number}/apps/{app_id} ``` If necessary, the
 *  `project_number` element can be replaced with the project ID of the Firebase
 *  project. Learn more about using project identifiers in Google's [AIP
 *  2510](https://google.aip.dev/cloud/2510) standard.
 */
@property(nonatomic, copy, nullable) NSString *app;

/**
 *  Fetches a @c
 *  GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaAttestationTokenResponse.
 *
 *  Validates a [reCAPTCHA v3 response
 *  token](https://developers.google.com/recaptcha/docs/v3). If valid, returns
 *  an App Check token encapsulated in an AttestationTokenResponse.
 *
 *  @param object The @c
 *    GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaExchangeRecaptchaTokenRequest
 *    to include in the query.
 *  @param app Required. The relative resource name of the web app, in the
 *    format: ``` projects/{project_number}/apps/{app_id} ``` If necessary, the
 *    `project_number` element can be replaced with the project ID of the
 *    Firebase project. Learn more about using project identifiers in Google's
 *    [AIP 2510](https://google.aip.dev/cloud/2510) standard.
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsAppsExchangeRecaptchaToken
 */
+ (instancetype)queryWithObject:(GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaExchangeRecaptchaTokenRequest *)object
                            app:(NSString *)app;

@end

/**
 *  Validates a [SafetyNet
 *  token](https://developer.android.com/training/safetynet/attestation#request-attestation-step).
 *  If valid, returns an App Check token encapsulated in an
 *  AttestationTokenResponse.
 *
 *  Method: firebaseappcheck.projects.apps.exchangeSafetyNetToken
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsAppsExchangeSafetyNetToken : GTLRFirebaseappcheckQuery

/**
 *  Required. The relative resource name of the Android app, in the format: ```
 *  projects/{project_number}/apps/{app_id} ``` If necessary, the
 *  `project_number` element can be replaced with the project ID of the Firebase
 *  project. Learn more about using project identifiers in Google's [AIP
 *  2510](https://google.aip.dev/cloud/2510) standard.
 */
@property(nonatomic, copy, nullable) NSString *app;

/**
 *  Fetches a @c
 *  GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaAttestationTokenResponse.
 *
 *  Validates a [SafetyNet
 *  token](https://developer.android.com/training/safetynet/attestation#request-attestation-step).
 *  If valid, returns an App Check token encapsulated in an
 *  AttestationTokenResponse.
 *
 *  @param object The @c
 *    GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaExchangeSafetyNetTokenRequest
 *    to include in the query.
 *  @param app Required. The relative resource name of the Android app, in the
 *    format: ``` projects/{project_number}/apps/{app_id} ``` If necessary, the
 *    `project_number` element can be replaced with the project ID of the
 *    Firebase project. Learn more about using project identifiers in Google's
 *    [AIP 2510](https://google.aip.dev/cloud/2510) standard.
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsAppsExchangeSafetyNetToken
 */
+ (instancetype)queryWithObject:(GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaExchangeSafetyNetTokenRequest *)object
                            app:(NSString *)app;

@end

/**
 *  Initiates the App Attest flow by generating a challenge which will be used
 *  as a type of nonce for this attestation.
 *
 *  Method: firebaseappcheck.projects.apps.generateAppAttestChallenge
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsAppsGenerateAppAttestChallenge : GTLRFirebaseappcheckQuery

/**
 *  Required. The full resource name to the iOS App. Format:
 *  "projects/{project_id}/apps/{app_id}"
 */
@property(nonatomic, copy, nullable) NSString *app;

/**
 *  Fetches a @c
 *  GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaAppAttestChallengeResponse.
 *
 *  Initiates the App Attest flow by generating a challenge which will be used
 *  as a type of nonce for this attestation.
 *
 *  @param object The @c
 *    GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaGenerateAppAttestChallengeRequest
 *    to include in the query.
 *  @param app Required. The full resource name to the iOS App. Format:
 *    "projects/{project_id}/apps/{app_id}"
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsAppsGenerateAppAttestChallenge
 */
+ (instancetype)queryWithObject:(GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaGenerateAppAttestChallengeRequest *)object
                            app:(NSString *)app;

@end

/**
 *  Gets the RecaptchaConfigs for the specified list of apps atomically. For
 *  security reasons, the `site_secret` field is never populated in the
 *  response.
 *
 *  Method: firebaseappcheck.projects.apps.recaptchaConfig.batchGet
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsAppsRecaptchaConfigBatchGet : GTLRFirebaseappcheckQuery

/**
 *  Required. The relative resource names of the RecaptchaConfigs to retrieve,
 *  in the format: ``` projects/{project_number}/apps/{app_id}/recaptchaConfig
 *  ``` A maximum of 100 objects can be retrieved in a batch.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *names;

/**
 *  Required. The parent project name shared by all RecaptchaConfigs being
 *  retrieved, in the format ``` projects/{project_number} ``` The parent
 *  collection in the `name` field of any resource being retrieved must match
 *  this field, or the entire batch fails.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaBatchGetRecaptchaConfigsResponse.
 *
 *  Gets the RecaptchaConfigs for the specified list of apps atomically. For
 *  security reasons, the `site_secret` field is never populated in the
 *  response.
 *
 *  @param parent Required. The parent project name shared by all
 *    RecaptchaConfigs being retrieved, in the format ```
 *    projects/{project_number} ``` The parent collection in the `name` field of
 *    any resource being retrieved must match this field, or the entire batch
 *    fails.
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsAppsRecaptchaConfigBatchGet
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Gets the RecaptchaConfig for the specified app. For security reasons, the
 *  `site_secret` field is never populated in the response.
 *
 *  Method: firebaseappcheck.projects.apps.recaptchaConfig.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsAppsRecaptchaConfigGet : GTLRFirebaseappcheckQuery

/**
 *  Required. The relative resource name of the RecaptchaConfig, in the format:
 *  ``` projects/{project_number}/apps/{app_id}/recaptchaConfig ```
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c
 *  GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaRecaptchaConfig.
 *
 *  Gets the RecaptchaConfig for the specified app. For security reasons, the
 *  `site_secret` field is never populated in the response.
 *
 *  @param name Required. The relative resource name of the RecaptchaConfig, in
 *    the format: ``` projects/{project_number}/apps/{app_id}/recaptchaConfig
 *    ```
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsAppsRecaptchaConfigGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Updates the RecaptchaConfig for the specified app. While this configuration
 *  is incomplete or invalid, the app will be unable to exchange reCAPTCHA
 *  tokens for App Check tokens. For security reasons, the `site_secret` field
 *  is never populated in the response.
 *
 *  Method: firebaseappcheck.projects.apps.recaptchaConfig.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsAppsRecaptchaConfigPatch : GTLRFirebaseappcheckQuery

/**
 *  Required. The relative resource name of the reCAPTCHA v3 configuration
 *  object, in the format: ```
 *  projects/{project_number}/apps/{app_id}/recaptchaConfig ```
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. A comma-separated list of names of fields in the RecaptchaConfig
 *  to update. Example: `site_secret`.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c
 *  GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaRecaptchaConfig.
 *
 *  Updates the RecaptchaConfig for the specified app. While this configuration
 *  is incomplete or invalid, the app will be unable to exchange reCAPTCHA
 *  tokens for App Check tokens. For security reasons, the `site_secret` field
 *  is never populated in the response.
 *
 *  @param object The @c
 *    GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaRecaptchaConfig to
 *    include in the query.
 *  @param name Required. The relative resource name of the reCAPTCHA v3
 *    configuration object, in the format: ```
 *    projects/{project_number}/apps/{app_id}/recaptchaConfig ```
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsAppsRecaptchaConfigPatch
 */
+ (instancetype)queryWithObject:(GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaRecaptchaConfig *)object
                           name:(NSString *)name;

@end

/**
 *  Updates the specified Service configurations atomically.
 *
 *  Method: firebaseappcheck.projects.services.batchUpdate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsServicesBatchUpdate : GTLRFirebaseappcheckQuery

/**
 *  Required. The parent project name shared by all Service configurations being
 *  updated, in the format ``` projects/{project_number} ``` The parent
 *  collection in the `name` field of any resource being updated must match this
 *  field, or the entire batch fails.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaBatchUpdateServicesResponse.
 *
 *  Updates the specified Service configurations atomically.
 *
 *  @param object The @c
 *    GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaBatchUpdateServicesRequest
 *    to include in the query.
 *  @param parent Required. The parent project name shared by all Service
 *    configurations being updated, in the format ``` projects/{project_number}
 *    ``` The parent collection in the `name` field of any resource being
 *    updated must match this field, or the entire batch fails.
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsServicesBatchUpdate
 */
+ (instancetype)queryWithObject:(GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaBatchUpdateServicesRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Gets the Service configuration for the specified service name.
 *
 *  Method: firebaseappcheck.projects.services.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsServicesGet : GTLRFirebaseappcheckQuery

/**
 *  Required. The relative resource name of the Service to retrieve, in the
 *  format: ``` projects/{project_number}/services/{service_id} ``` Note that
 *  the `service_id` element must be a supported service ID. Currently, the
 *  following service IDs are supported: * `firebasestorage.googleapis.com`
 *  (Cloud Storage for Firebase) * `firebasedatabase.googleapis.com` (Firebase
 *  Realtime Database)
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaService.
 *
 *  Gets the Service configuration for the specified service name.
 *
 *  @param name Required. The relative resource name of the Service to retrieve,
 *    in the format: ``` projects/{project_number}/services/{service_id} ```
 *    Note that the `service_id` element must be a supported service ID.
 *    Currently, the following service IDs are supported: *
 *    `firebasestorage.googleapis.com` (Cloud Storage for Firebase) *
 *    `firebasedatabase.googleapis.com` (Firebase Realtime Database)
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsServicesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists all Service configurations for the specified project. Only Services
 *  which were explicitly configured using UpdateService or BatchUpdateServices
 *  will be returned.
 *
 *  Method: firebaseappcheck.projects.services.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsServicesList : GTLRFirebaseappcheckQuery

/**
 *  The maximum number of Services to return in the response. Only explicitly
 *  configured services are returned. The server may return fewer than this at
 *  its own discretion. If no value is specified (or too large a value is
 *  specified), the server will impose its own limit.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Token returned from a previous call to ListServices indicating where in the
 *  set of Services to resume listing. Provide this to retrieve the subsequent
 *  page. When paginating, all other parameters provided to ListServices must
 *  match the call that provided the page token; if they do not match, the
 *  result is undefined.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The relative resource name of the parent project for which to list
 *  each associated Service, in the format: ``` projects/{project_number} ```
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaListServicesResponse.
 *
 *  Lists all Service configurations for the specified project. Only Services
 *  which were explicitly configured using UpdateService or BatchUpdateServices
 *  will be returned.
 *
 *  @param parent Required. The relative resource name of the parent project for
 *    which to list each associated Service, in the format: ```
 *    projects/{project_number} ```
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsServicesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates the specified Service configuration.
 *
 *  Method: firebaseappcheck.projects.services.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsServicesPatch : GTLRFirebaseappcheckQuery

/**
 *  Required. The relative resource name of the service configuration object, in
 *  the format: ``` projects/{project_number}/services/{service_id} ``` Note
 *  that the `service_id` element must be a supported service ID. Currently, the
 *  following service IDs are supported: * `firebasestorage.googleapis.com`
 *  (Cloud Storage for Firebase) * `firebasedatabase.googleapis.com` (Firebase
 *  Realtime Database)
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. A comma-separated list of names of fields in the Service to
 *  update. Example: `enforcement_mode`.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaService.
 *
 *  Updates the specified Service configuration.
 *
 *  @param object The @c
 *    GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaService to include in the
 *    query.
 *  @param name Required. The relative resource name of the service
 *    configuration object, in the format: ```
 *    projects/{project_number}/services/{service_id} ``` Note that the
 *    `service_id` element must be a supported service ID. Currently, the
 *    following service IDs are supported: * `firebasestorage.googleapis.com`
 *    (Cloud Storage for Firebase) * `firebasedatabase.googleapis.com` (Firebase
 *    Realtime Database)
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsServicesPatch
 */
+ (instancetype)queryWithObject:(GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1betaService *)object
                           name:(NSString *)name;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
