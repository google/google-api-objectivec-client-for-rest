// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Testing Svc (testing_svc/v3)
// Description:
//   Service for the GTLRService tests, based on Drive. Allows us to avoid break
//   when Drive changes.

#import "GTLRTestingSvcQuery.h"

#import "GTLRTestingSvcObjects.h"

// ----------------------------------------------------------------------------
// Constants

// corpus
NSString * const kGTLRTestingSvcCorpusDomain = @"domain";
NSString * const kGTLRTestingSvcCorpusUser   = @"user";

// ----------------------------------------------------------------------------
// Query Classes
//

@implementation GTLRTestingSvcQuery

@dynamic fields;

@end

@implementation GTLRTestingSvcQuery_FilesCreate

@dynamic ignoreDefaultVisibility, keepRevisionForever, ocrLanguage,
         useContentAsIndexableText;

+ (instancetype)queryWithObject:(GTLRTestingSvc_File *)object
               uploadParameters:(GTLRUploadParameters *)uploadParameters {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSString *pathURITemplate = @"files";
  GTLRTestingSvcQuery_FilesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.uploadParameters = uploadParameters;
  query.expectedObjectClass = [GTLRTestingSvc_File class];
  query.loggingName = @"drive.files.create";
  return query;
}

@end

@implementation GTLRTestingSvcQuery_FilesDelete

@dynamic fileId;

+ (instancetype)queryWithFileId:(NSString *)fileId {
  NSArray *pathParams = @[ @"fileId" ];
  NSString *pathURITemplate = @"files/{fileId}";
  GTLRTestingSvcQuery_FilesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.fileId = fileId;
  query.loggingName = @"drive.files.delete";
  return query;
}

@end

@implementation GTLRTestingSvcQuery_FilesGet

@dynamic acknowledgeAbuse, fileId;

+ (instancetype)queryWithFileId:(NSString *)fileId {
  NSArray *pathParams = @[ @"fileId" ];
  NSString *pathURITemplate = @"files/{fileId}";
  GTLRTestingSvcQuery_FilesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.fileId = fileId;
  query.expectedObjectClass = [GTLRTestingSvc_File class];
  query.loggingName = @"drive.files.get";
  return query;
}

+ (instancetype)queryForMediaWithFileId:(NSString *)fileId {
  GTLRTestingSvcQuery_FilesGet *query =
    [self queryWithFileId:fileId];
  query.downloadAsDataObjectType = @"media";
  query.useMediaDownloadService = YES;
  query.loggingName = @"Download drive.files.get";
  return query;
}

@end

@implementation GTLRTestingSvcQuery_FilesList

@dynamic corpus, extras, orderBy, pageSize, pageToken, q, spaces,
         timeParamForTesting;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"extras" : [NSString class]
  };
  return map;
}

+ (instancetype)query {
  NSString *pathURITemplate = @"files";
  GTLRTestingSvcQuery_FilesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRTestingSvc_FileList class];
  query.loggingName = @"drive.files.list";
  return query;
}

@end

@implementation GTLRTestingSvcQuery_PermissionsCreate

@dynamic emailMessage, fileId, sendNotificationEmail, transferOwnership;

+ (instancetype)queryWithObject:(GTLRTestingSvc_Permission *)object
                         fileId:(NSString *)fileId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"fileId" ];
  NSString *pathURITemplate = @"files/{fileId}/permissions";
  GTLRTestingSvcQuery_PermissionsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.fileId = fileId;
  query.expectedObjectClass = [GTLRTestingSvc_Permission class];
  query.loggingName = @"drive.permissions.create";
  return query;
}

@end

@implementation GTLRTestingSvcQuery_PermissionsList

@dynamic fileId;

+ (instancetype)queryWithFileId:(NSString *)fileId {
  NSArray *pathParams = @[ @"fileId" ];
  NSString *pathURITemplate = @"files/{fileId}/permissions";
  GTLRTestingSvcQuery_PermissionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.fileId = fileId;
  query.expectedObjectClass = [GTLRTestingSvc_PermissionList class];
  query.loggingName = @"drive.permissions.list";
  return query;
}

@end
